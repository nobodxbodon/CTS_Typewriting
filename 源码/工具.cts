/// <引用 路径="../node_modules/@types/支持库/index.d.cts"/>

导入 { 拼音 } 来自 "./编译拼音";

// 类型部分
导出 常量 枚举 比较 {
    小于 = -1,
    等于 = 0,
    大于 = 1
}

导出 类型 比较函数<T> = (a: T, b: T) => 比较;

导出 接口 可排序 {
    频率?: 数字;
    文本?: 文字;
}

导出 接口 节点映射<T> {
    [x: 文字]: T;
}

导出 接口 库内词 扩展 可排序 {
    文本: 文字;
    拼音: 文字;
    剩余输入?: 文字;
    频率?: 数字;
}

导出 接口 拼音验证结果 {
    py1: 拼音[];
    py2: 拼音[];
    包含简拼: 真假;
    全为简拼: 真假;
    全为全拼: 真假;
}

导出 接口 拼音评估结果 {
    可以重组: 真假;
    必须重组: 真假;
    包含简拼: 真假;
    全为简拼: 真假;
    全为全拼: 真假;
}

导出 接口 用户词 扩展 库内词 {
    使用次数: 数字;
}

导出 枚举 存在状态 {
    存在 = 1,
    应替换 = 2,
    不存在 = 3
}

// 工具部分
导出 函数 创建对象<T>(): T {
    变量 对象值 = 对象类.创建(空值);
    对象值.__ = 空值;
    删除 对象值.__;
    返回 对象值 转为 T;
}

导出 函数 创建节点映射<T>() {
    返回 创建对象<节点映射<T>>();
}

导出 函数 按系数升序<T 扩展 可排序>(a: T, b: T): 比较 {
    如果 (a === b)
        返回 比较.等于;
    如果 (a === 未定 || a.频率 === 未定)
        返回 比较.大于;
    如果 (b === 未定 || b.频率 === 未定)
        返回 比较.小于;
    如果 (a.频率 === b.频率)
        返回 比较.等于;
    返回 a.频率 > b.频率 ? 比较.小于 : 比较.大于;
}

导出 函数 按系数降序<T 扩展 可排序>(a: T, b: T): 比较 {
    如果 (a === b)
        返回 比较.等于;
    如果 (a === 未定 || a.频率 === 未定)
        返回 比较.小于;
    如果 (b === 未定 || b.频率 === 未定)
        返回 比较.大于;
    如果 (a.频率 === b.频率)
        返回 比较.等于;
    返回 a.频率 > b.频率 ? 比较.大于 : 比较.小于;
}

导出 函数 按文本升序<T 扩展 可排序>(a: T, b: T): 比较 {
    如果 (a === b)
        返回 比较.等于;
    如果 (a === 未定 || a.文本 === 未定)
        返回 比较.大于;
    如果 (b === 未定 || b.文本 === 未定)
        返回 比较.小于;
    如果 (a.文本 === b.文本)
        返回 比较.等于;
    返回 a.文本 < b.文本 ? 比较.大于 : 比较.小于;
}

导出 函数 按文本降序<T 扩展 可排序>(a: T, b: T): 比较 {
    如果 (a === b)
        返回 比较.等于;
    如果 (a === 未定 || a.文本 === 未定)
        返回 比较.小于;
    如果 (b === 未定 || b.文本 === 未定)
        返回 比较.大于;
    如果 (a.文本 === b.文本)
        返回 比较.等于;
    返回 a.文本 < b.文本 ? 比较.小于 : 比较.大于;
}

导出 函数* 分行读文件(文件文本: 文字, 分隔符: ";" | "\n" | 文字 = "\n") {
    如果 (!文件文本) {
        返回;
    }
    变量 行组 = 文件文本.分割(分隔符);
    循环 (变量 i = 0; i < 行组.长度; i++) {
        获得 行组[i];
    }
}

导出 函数 哈希(文本: 文字, 数量: 数字) {
    变量 v = 0;
    循环 (变量 i = 0; i < 文本.长度; i++) {
        v += 文本[i].字符代码在(0);
    }
    返回 v % 数量;
}

导出 枚举 首字 {
    a,
    b,
    c,
    ch,
    d,
    e,
    f,
    g,
    h,
    i,
    j,
    k,
    l,
    m,
    n,
    o,
    p,
    q,
    r,
    s,
    sh,
    t,
    u,
    v,
    w,
    x,
    y,
    z,
    zh,
    $a_zh
}

导出 函数 字首哈希(文本: 文字) {
    假如 (文本) {
        如为 "a":
            返回 首字.a;
        如为 "b":
            返回 首字.b;
        如为 "c":
            返回 首字.c;
        如为 "ch":
            返回 首字.ch;
        如为 "d":
            返回 首字.d;
        如为 "e":
            返回 首字.e;
        如为 "f":
            返回 首字.f;
        如为 "g":
            返回 首字.g;
        如为 "h":
            返回 首字.h;
        如为 "i":
            返回 首字.i;
        如为 "j":
            返回 首字.j;
        如为 "k":
            返回 首字.k;
        如为 "l":
            返回 首字.l;
        如为 "m":
            返回 首字.m;
        如为 "n":
            返回 首字.n;
        如为 "o":
            返回 首字.o;
        如为 "p":
            返回 首字.p;
        如为 "q":
            返回 首字.q;
        如为 "r":
            返回 首字.r;
        如为 "s":
            返回 首字.s;
        如为 "sh":
            返回 首字.sh;
        如为 "t":
            返回 首字.t;
        如为 "u":
            返回 首字.u;
        如为 "v":
            返回 首字.v;
        如为 "w":
            返回 首字.w;
        如为 "x":
            返回 首字.x;
        如为 "y":
            返回 首字.y;
        如为 "z":
            返回 首字.z;
        如为 "zh":
            返回 首字.zh;
        默认:
            返回 首字.$a_zh;
    }
}
