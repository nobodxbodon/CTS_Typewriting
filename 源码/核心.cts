/// <引用 路径="../node_modules/@types/支持库/index.d.cts"/>

导出 函数 是数组(值: 任意): 值 作为 数组类<任意> {
    返回 数组类.是数组 ? 数组类.是数组(值) : 值 身为 数组类;
}

导出 常量 枚举 认定层次 {
    无 = 0,
    正常 = 1,
    积极 = 2,
    非常积极 = 3
}

导出 名域 调试输出 {

    导出 变量 当前认定层次 = 认定层次.无;
    导出 变量 正在调试中 = 为假;

    导出 函数 应该断言(层次: 认定层次): 真假 {
        返回 当前认定层次 >= 层次;
    }

    导出 函数 断言(表达式: 真假, 消息?: 文字, 详细信息?: 文字 | (() => 文字), 栈记号?: 函数类): 无值 {
        如果 (!表达式) {
            如果 (详细信息) {
                消息 += "\r\n详细调试信息: " + (类为 详细信息 === "文字" ? 详细信息 : 详细信息());
            }
            失败(消息 ? "假表达式: " + 消息 : "假表达式.", 栈记号 || 断言);
        }
    }

    导出 函数 相等断言<T>(a: T, b: T, msg?: 文字, msg2?: 文字): 无值 {
        如果 (a !== b) {
            常量 消息 = msg ? msg2 ? `${msg} ${msg2}` : msg : "";
            失败(`表达式: ${a} === ${b}. ${消息}`);
        }
    }

    导出 函数 小于断言(a: 数字, b: 数字, msg?: 文字): 无值 {
        如果 (a >= b) {
            失败(`表达式: ${a} < ${b}. ${msg || ""}`);
        }
    }

    导出 函数 小于等于断言(a: 数字, b: 数字): 无值 {
        如果 (a > b) {
            失败(`表达式: ${a} <= ${b}`);
        }
    }

    导出 函数 大于等于断言(a: 数字, b: 数字): 无值 {
        如果 (a < b) {
            失败(`表达式: ${a} >= ${b}`);
        }
    }

    导出 函数 失败(消息?: 文字, 栈记号?: 函数类): 不及 {
        调试;
        常量 e = 新建 错误类(消息 ? `调试失败. ${消息}` : "调试失败.");
        如果 ((<任意>错误类).captureStackTrace) {
            (<任意>错误类).captureStackTrace(e, 栈记号 || 失败);
        }
        抛出 e;
    }

    导出 函数 不及断言(成员: 不及, 消息?: 文字, 栈记号?: 函数类): 不及 {
        返回 失败(消息 || `非法值: ${成员}`, 栈记号 || 不及断言);
    }
    
}
