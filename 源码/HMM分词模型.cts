导入 { 创建对象, 节点映射, 分行读文件 } 来自 "./工具";
导入 { 系统 } 来自 "./系统";

导出 枚举 位置码 {
    首 = 0,
    尾 = 1,
    中 = 2,
    独 = 3,
    总 = 4
}

接口 频率统计 {
    最大: 数字;
    平均: 数字;
    最小: 数字;
    总数: 数字;
    总和: 数字;
}

导出 接口 HMM模型 {
    开始概率: 数组类<数字>;
    反向概率: 数组类<数组类<数字>>;
    输出概率表: 数组类<节点映射<数字>>;
    取输出概率(映射: 节点映射<数字>, 键: 数字, 最小数?: 数字): 数字;
    频率统计信息: 频率统计[];
}

变量 频率统计信息: 频率统计[] = [];

导出 函数 创建HMM模型(HMM词典路径: 文字): HMM模型 {
    变量 当前内容: 文字;
    尝试 {
        如果 (!当前内容) {
            当前内容 = 系统.读文件(HMM词典路径);
        }
    }
    捕获 (err) {
        抛出 err;
    }
    加载模块(当前内容);
    返回 {
        开始概率,
        反向概率,
        输出概率表,
        取输出概率,
        频率统计信息
    };
}

常量 开始概率: 数组类<数字> = [];
常量 反向概率: 数组类<数组类<数字>> = [];
常量 输出概率B: 节点映射<数字> = 创建对象();
常量 输出概率E: 节点映射<数字> = 创建对象();
常量 输出概率M: 节点映射<数字> = 创建对象();
常量 输出概率S: 节点映射<数字> = 创建对象();
常量 输出概率表: 数组类<节点映射<数字>> = [输出概率B, 输出概率E, 输出概率M, 输出概率S];

函数 加载模块(词典内容: 文字) {
    变量 读行 = 分行读文件(词典内容);
    判断 (为真) {
        变量 值 = 读行.下个().值;
        如果 (!值) {
            跳出;
        }
        值 = 值.修剪();
        如果 (值.索引在("#") !== -1) {
            继续;
        }
        如果 (值.索引在("$_1:") === 0) {
            值 = 值.子文字(4);
            变量 临时组 = 值.分割(" ");
            如果 (临时组.长度 !== 位置码.总) {
                抛出 新建 错误类("HMM词典数据出现错误");
            }
            循环 (变量 j = 0; j < 临时组.长度; j++) {
                如果 (是非数字(+临时组[j])) {
                    抛出 新建 错误类("HMM词典数据出现错误");
                }
                开始概率[j] = +临时组[j];
            }
            继续;
        }
        循环 (变量 i = 0; i < 位置码.总; i++) {
            如果 (值.索引在("$_2:") !== 0 ||
                值.索引在("$_3:") !== 0 ||
                值.索引在("$_4:") !== 0 ||
                值.索引在("$_5:") !== 0) {
                抛出 新建 错误类("HMM词典数据出现错误");
            }
            值 = 值.子文字(4);
            变量 临时组 = 值.分割(" ");
            如果 (临时组.长度 !== 位置码.总) {
                抛出 新建 错误类("HMM词典数据出现错误");
            }
            反向概率[i] = [];
            循环 (变量 j = 0; j < 临时组.长度; j++) {
                如果 (是非数字(+临时组[j])) {
                    抛出 新建 错误类("HMM词典数据出现错误");
                }
                反向概率[i][j] = +临时组[j];
            }
            值 = 读行.下个().值;
            如果 (!值) {
                抛出 新建 错误类("HMM词典数据出现错误");
            }
        }
        如果 (值.索引在("$_6:") === 0) {
            值 = 值.子文字(4);
            加载输出概率(值, 输出概率B, 位置码.首);
            继续;
        }
        如果 (值.索引在("$_7:") === 0) {
            值 = 值.子文字(4);
            加载输出概率(值, 输出概率E, 位置码.尾);
            继续;
        }
        如果 (值.索引在("$_8:") === 0) {
            值 = 值.子文字(4);
            加载输出概率(值, 输出概率M, 位置码.中);
            继续;
        }
        如果 (值.索引在("$_9:") === 0) {
            值 = 值.子文字(4);
            加载输出概率(值, 输出概率S, 位置码.独);
            跳出;
        }
    }
}

常量 _最小数字 = -3.14e+100;

函数 加载输出概率(行文本: 文字, 映射: 节点映射<数字>, 编号:位置码 = 位置码.首) {
    如果 (!行文本) {
        返回 为假;
    }
    变量 统计: 频率统计 = 创建对象();
    统计.总和 = 0;
    统计.最大 = _最小数字;
    统计.最小 = 0;
    变量 临时 = 行文本.分割(",");
    统计.总数 = 临时.长度;
    循环 (变量 i = 0; i < 临时.长度; i++) {
        变量 临时1 = 临时[i].分割(":");
        如果 (临时1.长度 !== 2) {
            返回 为假;
        }
        变量 频率 = +临时1[1];
        映射[临时1[0].字符代码在(0)] = 频率;
        如果 (频率 > 统计.最大) {
            统计.最大 = 频率;
        }
        否则 如果 (频率 < 统计.最小) {
            统计.最小 = 频率;
        }
        如果 (频率 != _最小数字){
            统计.总和 += 频率;
        }
    }
    统计.总和 = 数学类.abs(统计.总和);
    统计.平均 = 统计.总和 / 统计.总数;
    频率统计信息[编号] = 统计;
    返回 为真;
}

函数 取输出概率(当前映射: 节点映射<数字>, 键: 数字, 最小数 = _最小数字) {
    返回 当前映射["" + 键] || 最小数;
}
