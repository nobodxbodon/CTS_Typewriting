导入 * 转为 fs 来自 "fs";
导入 * 转为 os 来自 "os";
导入 * 转为 path 来自 "path";
导入 * 转为 net 来自 "net";
导入 * 转为 cp 来自 "child_process";

导出 常量 枚举 文件信息种类 {
    文件类,
    目录类
}

导出 接口 服务器 {
    监听: (p: 文字) => 任意;
}

导出 接口 进程 {
    引发(事件: 文字, 监听: (代码: 数字) => 无值): 无值;
}

导出 接口 系统 {
    新行: 文字;
    读文件(路径: 文字, 不解码?: 真假): 文字 | 未定;
    写文件(路径: 文字, 数据: 文字, 写字节或符号?: 真假): 无值;
    追写文件(路径: 文字, 数据: 文字): 无值;
    文件存在(路径: 文字): 真假;
    目录存在(路径: 文字): 真假;
    创建目录(路径: 文字): 无值;
    解析路径(路径: 文字): 文字;
    结合路径(...路径: 文字[]): 文字;
    临时目录(): 文字;
    创建服务(): 服务器;
    创建子进程(命令: 文字, 参数: 文字[]): 进程;
}

导出 变量 系统: 系统 = (() => {

    函数 取运行环境() {

        函数 读文件(路径: 文字, 不解码?: 真假) {
            常量 结果 = fs.读文件同步(路径);
            如果 (不解码) {
                返回 结果;
            }
            返回 结果.转为文字();
        }

        函数 写文件(路径: 文字, 数据: 文字, 写字节或符号?: 真假) {
            如果 (写字节或符号) {
                数据 = "\uFEFF" + 数据;
            }
            变量 句柄: 数字;
            尝试 {
                句柄 = fs.打开文件同步(路径, "w");
                fs.写文件同步(句柄, 数据);
            }
            善后 {
                如果 (句柄 !== 未定) {
                    fs.关闭文件同步(句柄);
                }
            }
        }

        函数 文件系统信息(路径: 文字, 条目种类: 文件信息种类) {
            尝试 {
                常量 状态 = fs.状态同步(路径);
                假如 (条目种类) {
                    如为 文件信息种类.文件类: 返回 状态.是文件();
                    如为 文件信息种类.目录类: 返回 状态.是目录();
                }
            }
            捕获 (e) {
                返回 为假;
            }
        }

        函数 文件存在(路径: 文字): 真假 {
            返回 文件系统信息(路径, 文件信息种类.文件类);
        }

        函数 目录存在(路径: 文字): 真假 {
            返回 文件系统信息(路径, 文件信息种类.目录类);
        }

        函数 创建目录(目录名称: 文字) {
            如果 (!文件系统信息(目录名称, 文件信息种类.目录类)) {
                fs.创建目录同步(目录名称);
            }
        }

        函数 追写文件(文件名: 文字, 数据: 文字) {
            fs.追写文件同步(文件名, 数据);
        }

        函数 创建子进程(命令: 文字, 参数: 文字[]): 进程 {
            返回 cp.创建(命令, 参数, { 独立: 为真 });
        }

        常量 运行系统: 系统 = {
            新行: os.新行字符,
            读文件,
            写文件,
            追写文件,
            文件存在,
            目录存在,
            创建目录,
            结合路径: (...路径: 文字[]) => path.结合(路径),
            解析路径: 路径 => path.解析(__目录名称, 路径),
            临时目录: os.临时目录,
            创建服务: net.创建服务器,
            创建子进程
        };

        返回 运行系统;
    }

    变量 系统: 系统 = 取运行环境();
    返回 系统;
    
})();
