/// <引用 路径="../node_modules/@types/支持库/index.d.cts"/>
导入 { 是数组 } 来自 "./核心";
导入 { 创建对象, 可排序 } 来自 "./工具";
导出 枚举 Py {
    nullCharacter = 0,
    _0 = 0x30,
    _1 = 0x31,
    _2 = 0x32,
    _3 = 0x33,
    _4 = 0x34,
    _5 = 0x35,
    _6 = 0x36,
    _7 = 0x37,
    _8 = 0x38,
    _9 = 0x39,
    a = 0x61,
    a1 = 0x101,
    a2 = 0xe1,
    a3 = 0x1ce,
    a4 = 0xe0,
    b = 0x62,
    c = 0x63,
    d = 0x64,
    e = 0x65,
    e1 = 0x113,
    e2 = 0xe9,
    e3 = 0x11b,
    e4 = 0xe8,
    f = 0x66,
    g = 0x67,
    h = 0x68,
    i = 0x69,
    i1 = 0x12b,
    i2 = 0xed,
    i3 = 0x1d0,
    i4 = 0xec,
    j = 0x6A,
    k = 0x6B,
    l = 0x6C,
    m = 0x6D,
    n = 0x6E,
    o = 0x6F,
    o1 = 0x14d,
    o2 = 0xf3,
    o3 = 0x1d2,
    o4 = 0xf2,
    p = 0x70,
    q = 0x71,
    r = 0x72,
    s = 0x73,
    t = 0x74,
    u = 0x75,
    u1 = 0x16b,
    u2 = 0xfa,
    u3 = 0x1d4,
    u4 = 0xf9,
    v = 0x76,
    v0 = 0xfc,
    v1 = 0x1d6,
    v2 = 0x1d8,
    v3 = 0x1da,
    v4 = 0x1dc,
    w = 0x77,
    x = 0x78,
    y = 0x79,
    z = 0x7A,
    逗号 = 0x2C,
    单引号 = 0x27
}
导出 接口 文本跨度 {
    开始?: 数字;
    结尾?: 数字;
}
导出 类型 韵母类型 = 韵母_a | 韵母_o | 韵母_e | 韵母_i | 韵母_u | 韵母_v | 韵母_ai | 韵母_ei | 韵母_ui | 韵母_ao | 韵母_ou | 韵母_an | 韵母_en | 韵母_in | 韵母_ie | 韵母_iu | 韵母_ue | 韵母_ve | 韵母_er | 韵母_un | 韵母_vn | 韵母_ang | 韵母_eng | 韵母_ing | 韵母_ong;
导出 接口 韵母 扩展 拼音节点 {
    标记: 韵母类型["标记"];
    声调?: 数字;
}
导出 类型 声母类型 = 声母_b | 声母_p | 声母_m | 声母_f | 声母_d | 声母_t | 声母_n | 声母_l | 声母_g | 声母_k | 声母_h | 声母_j | 声母_q | 声母_x | 声母_zh | 声母_ch | 声母_sh | 声母_r | 声母_z | 声母_c | 声母_s | 声母_y | 声母_w;
导出 类型 三拼韵母组 = [三拼无音韵母, 三拼韵母];
导出 接口 声母 扩展 拼音节点 {
    标记: 声母类型["标记"];
    可双拼韵母?: 韵母;
    可三拼韵母?: 三拼韵母组;
}
导出 接口 拼音 扩展 拼音节点 {
    声母?: 声母;
    韵母?: 韵母 | 三拼韵母组;
    可分割?: 真假;
    可拆分?: 数字;
}
导出 接口 拼音节点 扩展 文本跨度, 可排序 {
    标记: PY标记;
    文本?: 文字;
}
导出 类型 三拼无音韵母 = 韵母_i | 韵母_u;
导出 类型 三拼韵母 = 韵母_a | 韵母_an | 韵母_ai | 韵母_ao | 韵母_ang | 韵母_o | 韵母_e | 韵母_ong;
导出 类型 b可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_o | 韵母_u;
导出 类型 b可三双拼韵母 = [韵母_i, 韵母_an] | [韵母_i, 韵母_ao];
导出 接口 声母_b 扩展 声母 {
    标记: PY标记.声母_b;
    // B: ["ba", "bai", "ban", "bang", "bao", "bei", "ben", "beng", "bi", "bie", "bin", "bing", "bo", "bu"],
    可双拼韵母?: b可双拼韵母;
    // B: [ "bian", "biao"],
    可三拼韵母?: b可三双拼韵母;
}
导出 类型 p可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_o | 韵母_ou | 韵母_u;
导出 类型 p可三双拼韵母 = b可三双拼韵母;
导出 接口 声母_p 扩展 声母 {
    标记: PY标记.声母_p;
    // P: ["pa", "pai", "pan", "pang", "pao", "pei", "pen", "peng", "pi", "pie", "pin", "ping", "po", "pou", "pu"],
    可双拼韵母: p可双拼韵母;
    // P: ["pian", "piao"],
    可三拼韵母: p可三双拼韵母;
}
导出 类型 m可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_iu | 韵母_o | 韵母_ou | 韵母_u;
导出 类型 m可三双拼韵母 = b可三双拼韵母;
导出 接口 声母_m 扩展 声母 {
    标记: PY标记.声母_m;
    // M: ["ma", "mai", "man", "mang", "mao", "me", "mei", "men", "meng", "mi","mie", "min", "ming", "miu", "mo", "mou", "mu"],
    可双拼韵母: m可双拼韵母;
    // M: ["mian", "miao"],
    可三拼韵母: m可三双拼韵母;
}
导出 类型 f可双拼韵母 = 韵母_a | 韵母_an | 韵母_ang | 韵母_ei | 韵母_en | 韵母_eng | 韵母_o | 韵母_ou | 韵母_u;
导出 接口 声母_f 扩展 声母 {
    标记: PY标记.声母_f;
    // F: ["fa", "fan", "fang", "fei", "fen", "feng", "fo", "fou", "fu"],
    可双拼韵母: f可双拼韵母;
}
导出 类型 d可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_ing | 韵母_iu | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 d可三双拼韵母 = b可三双拼韵母 | [韵母_u, 韵母_an] | [韵母_u, 韵母_o];
导出 接口 声母_d 扩展 声母 {
    标记: PY标记.声母_d;
    // D: ["da", "dai", "dan", "dang","dao","de","den", "dei", "deng", "di", "dia","die", "ding", "diu", "dong", "dou", "du",  "dui", "dun" ],
    可双拼韵母: d可双拼韵母;
    // D: ["dian", "diao","duan","duo" ]
    可三拼韵母: d可三双拼韵母;
}
导出 类型 t可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_eng | 韵母_i | 韵母_ie | 韵母_ing | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 t可三双拼韵母 = d可三双拼韵母;
导出 接口 声母_t 扩展 声母 {
    标记: PY标记.声母_t;
    // T: ["ta", "tai", "tan", "tang", "tao", "te", "teng", "ti", "tie", "ting", "tong", "tou", "tu", "tui", "tun"],
    可双拼韵母: t可双拼韵母;
    // T: ["tian", "tiao","tuan", "tuo"]
    可三拼韵母: t可三双拼韵母;
}
导出 类型 n可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_ing | 韵母_ie | 韵母_in | 韵母_iu | 韵母_i | 韵母_ong | 韵母_ou | 韵母_u | 韵母_v | 韵母_ve | 韵母_ue | 韵母_un;
导出 类型 n可三双拼韵母 = [韵母_i, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_i, 韵母_ao] | [韵母_u, 韵母_an] | [韵母_u, 韵母_o];
导出 接口 声母_n 扩展 声母 {
    标记: PY标记.声母_n;
    // N: ["na", "nai", "nan", "nang", "nao", "ne", "nei", "nen", "neng"                        , "ning",  "nie", "nin", "niu",            "nong", "nou", "nu", "nü", "nüe", "nun"],
    可双拼韵母: n可双拼韵母;
    //"nian", "niang", "niao", "nuan","nuo",
    可三拼韵母: n可三双拼韵母;
}
导出 类型 l可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_iu | 韵母_ong | 韵母_ou | 韵母_u | 韵母_v | 韵母_ve | 韵母_ue | 韵母_un;
导出 类型 l可三双拼韵母 = [韵母_i, 韵母_a] | [韵母_i, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_i, 韵母_ao] | [韵母_u, 韵母_an] | [韵母_u, 韵母_e] | [韵母_u, 韵母_o];
导出 接口 声母_l 扩展 声母 {
    标记: PY标记.声母_l;
    // L: ["la", "lai", "lan", "lang", "lao", "le", "lei", "leng", "li", "lia", "lian", "liang", "liao", "lie", "lin", "ling", "liu", "long", "lou", "lu", "lü", "luan", "lue", "lüe", "lun", "luo"],
    可双拼韵母: l可双拼韵母;
    可三拼韵母: l可三双拼韵母;
}
导出 类型 g可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 g可三双拼韵母 = [韵母_u, 韵母_a] | [韵母_u, 韵母_ai] | [韵母_u, 韵母_an] | [韵母_u, 韵母_ang] | [韵母_u, 韵母_o];
导出 接口 声母_g 扩展 声母 {
    标记: PY标记.声母_g;
    //G: ["ga", "gai", "gan", "gang", "gao", "ge", "gei", "gen", "geng", "gong", "gou", "gu", "gua", "guai", "guan", "guang", "gui", "gun", "guo"],
    可双拼韵母: g可双拼韵母;
    可三拼韵母: g可三双拼韵母;
}
导出 类型 k可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 k可三双拼韵母 = g可三双拼韵母;
导出 接口 声母_k 扩展 声母 {
    标记: PY标记.声母_k;
    // K: ["ka", "kai", "kan", "kang", "kao", "ke", "ken", "keng", "kong", "kou", "ku", "kua", "kuai", "kuan", "kuang", "kui", "kun", "kuo"],
    可双拼韵母: k可双拼韵母;
    可三拼韵母: k可三双拼韵母;
}
导出 类型 h可双拼韵母 = g可双拼韵母;
导出 类型 h可三双拼韵母 = g可三双拼韵母;
导出 接口 声母_h 扩展 声母 {
    标记: PY标记.声母_h;
    // H: ["ha", "hai", "han", "hang", "hao", "he", "hei", "hen", "heng", "hong", "hou", "hu", "hua", "huai", "huan", "huang", "hui", "hun", "huo"],
    可双拼韵母: h可双拼韵母;
    可三拼韵母: h可三双拼韵母;
}
导出 类型 j可双拼韵母 = 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_iu | 韵母_u | 韵母_un;
导出 类型 j可三双拼韵母 = [韵母_i, 韵母_a] | [韵母_i, 韵母_ai] | [韵母_i, 韵母_an] | [韵母_i, 韵母_ao] | [韵母_i, 韵母_ang] | [韵母_i, 韵母_ong] | [韵母_u, 韵母_an] | [韵母_u, 韵母_e];
导出 接口 声母_j 扩展 声母 {
    标记: PY标记.声母_j;
    //J: ["ji", "jia", "jian", "jiang", "jiao", "jie", "jin", "jing", "jiong", "jiu", "ju", "juan", "jue", "jun"],
    可双拼韵母: j可双拼韵母;
    可三拼韵母: j可三双拼韵母;
}
导出 类型 q可双拼韵母 = j可双拼韵母;
导出 类型 q可三双拼韵母 = j可三双拼韵母;
导出 接口 声母_q 扩展 声母 {
    标记: PY标记.声母_q;
    // Q: ["qi", "qia", "qian", "qiang", "qiao", "qie", "qin", "qing", "qiong", "qiu", "qu", "quan", "que", "qun"],
    可双拼韵母: q可双拼韵母;
    可三拼韵母: q可三双拼韵母;
}
导出 类型 x可双拼韵母 = q可双拼韵母;
导出 类型 x可三双拼韵母 = q可三双拼韵母;
导出 接口 声母_x 扩展 声母 {
    标记: PY标记.声母_x;
    //X: ["xi", "xia", "xian", "xiang", "xiao", "xie", "xin", "xing", "xiong", "xiu", "xu", "xuan", "xue", "xun"],
    可双拼韵母: x可双拼韵母;
    可三拼韵母: x可三双拼韵母;
}
导出 类型 zh可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 zh可三双拼韵母 = [韵母_u, 韵母_a] | [韵母_u, 韵母_ai] | [韵母_u, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_u, 韵母_o];
导出 接口 声母_zh 扩展 声母 {
    标记: PY标记.声母_zh;
    //Zh: ["zha", "zhai", "zhan", "zhang", "zhao", "zhe", "zhei", "zhen", "zheng", "zhi", "zhong", "zhou", "zhu", "zhua", "zhuai", "zhuan", "zhuang", "zhui", "zhun", "zhuo"],
    可双拼韵母: zh可双拼韵母;
    可三拼韵母: zh可三双拼韵母;
}
导出 类型 ch可双拼韵母 = 韵母_a | 韵母_ai | r可双拼韵母;
导出 类型 ch可三双拼韵母 = zh可三双拼韵母;
导出 接口 声母_ch 扩展 声母 {
    标记: PY标记.声母_ch;
    //Ch: ["cha", "chai", "chan", "chang", "chao", "che", "chen", "cheng", "chi", "chong", "chou", "chu", "chua", "chuai", "chuan", "chuang", "chui", "chun", "chuo"],
    可双拼韵母: ch可双拼韵母;
    可三拼韵母: ch可三双拼韵母;
}
导出 类型 sh可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 sh可三双拼韵母 = zh可三双拼韵母;
导出 接口 声母_sh 扩展 声母 {
    标记: PY标记.声母_sh;
    // Sh: ["sha", "shai", "shan", "shang", "shao", "she", "shei", "shen", "sheng", "shi", "shou", "shu", "shua", "shuai", "shuan", "shuang", "shui", "shun", "shuo"],
    可双拼韵母: sh可双拼韵母;
    可三拼韵母: sh可三双拼韵母;
}
导出 类型 r可双拼韵母 = 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_en | 韵母_eng | 韵母_i | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un;
导出 类型 r可三双拼韵母 = [韵母_u, 韵母_an] | [韵母_u, 韵母_o];
导出 接口 声母_r 扩展 声母 {
    标记: PY标记.声母_r;
    // R: ["ran", "rang", "rao", "re", "ren", "reng", "ri", "rong", "rou", "ru", "ruan", "rui", "run", "ruo"],
    可双拼韵母: r可双拼韵母;
    可三拼韵母: r可三双拼韵母;
}
导出 类型 z可双拼韵母 = g可双拼韵母 | 韵母_i;
导出 类型 z可三双拼韵母 = r可三双拼韵母;
导出 接口 声母_z 扩展 声母 {
    标记: PY标记.声母_z;
    // Z: ["za", "zai", "zan", "zang", "zao", "ze", "zei", "zen", "zeng", "zong", "zou", "zu", "zuan", "zui", "zun", "zuo", "zi"],
    可双拼韵母: z可双拼韵母;
    可三拼韵母: z可三双拼韵母;
}
导出 类型 c可双拼韵母 = ch可双拼韵母;
导出 类型 c可三双拼韵母 = r可三双拼韵母;
导出 接口 声母_c 扩展 声母 {
    标记: PY标记.声母_c;
    //  C: ["ca", "cai", "can", "cang", "cao", "ce", "cen", "ceng", "ci", "cong", "cou", "cu", "cuan", "cui", "cun", "cuo"],
    可双拼韵母: c可双拼韵母;
    可三拼韵母: c可三双拼韵母;
}
导出 类型 s可双拼韵母 = c可双拼韵母;
导出 类型 s可三双拼韵母 = r可三双拼韵母;
导出 接口 声母_s 扩展 声母 {
    标记: PY标记.声母_s;
    //  S: ["sa", "sai", "san", "sang", "sao", "se", "sen", "seng", "si", "song", "sou", "su", "suan", "sui", "sun", "suo"],
    可双拼韵母: s可双拼韵母;
    可三拼韵母: s可三双拼韵母;
}
导出 类型 y可双拼韵母 = 韵母_a | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_i | 韵母_in | 韵母_ing | 韵母_ong | 韵母_ou | 韵母_u | 韵母_un;
导出 类型 y可三双拼韵母 = [韵母_u, 韵母_an] | [韵母_u, 韵母_e];
导出 接口 声母_y 扩展 声母 {
    标记: PY标记.声母_y;
    // Y: ["ya", "yan", "yang", "yao", "ye", "yi", "yin", "ying", "yo", "yong", "you", "yu", "yuan", "yue", "yun"],
    可双拼韵母: y可双拼韵母;
    可三拼韵母: y可三双拼韵母;
}
导出 类型 w可双拼韵母 = 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ei | 韵母_en | 韵母_eng | 韵母_o | 韵母_u;
导出 接口 声母_w 扩展 声母 {
    标记: PY标记.声母_w;
    // W: ["wa", "wai", "wan", "wang", "wei", "wen", "weng", "wo", "wu"],
    可双拼韵母: w可双拼韵母;
}
导出 接口 单引号 扩展 拼音节点 {
    标记: PY标记.单引号;
}
导出 接口 韵母_a 扩展 韵母 {
    标记: PY标记.韵母_a;
    可标声调: 真假;
}
导出 接口 韵母_o 扩展 韵母 {
    标记: PY标记.韵母_o;
    可标声调: 真假;
}
导出 接口 韵母_e 扩展 韵母 {
    标记: PY标记.韵母_e;
    可标声调: 真假;
}
导出 接口 韵母_i 扩展 韵母 {
    标记: PY标记.韵母_i;
    可标声调: 真假;
}
导出 接口 韵母_u 扩展 韵母 {
    标记: PY标记.韵母_u;
    可标声调: 真假;
}
导出 接口 韵母_v 扩展 韵母 {
    标记: PY标记.韵母_v;
    可标声调: 真假;
}
导出 接口 韵母_ai 扩展 韵母 {
    标记: PY标记.韵母_ai;
}
导出 接口 韵母_ei 扩展 韵母 {
    标记: PY标记.韵母_ei;
}
导出 接口 韵母_iu 扩展 韵母 {
    标记: PY标记.韵母_iu;
}
导出 接口 韵母_ao 扩展 韵母 {
    标记: PY标记.韵母_ao;
}
导出 接口 韵母_ou 扩展 韵母 {
    标记: PY标记.韵母_ou;
}
导出 接口 韵母_ui 扩展 韵母 {
    标记: PY标记.韵母_ui;
}
导出 接口 韵母_an 扩展 韵母 {
    标记: PY标记.韵母_an;
}
导出 接口 韵母_en 扩展 韵母 {
    标记: PY标记.韵母_en;
}
导出 接口 韵母_in 扩展 韵母 {
    标记: PY标记.韵母_in;
}
导出 接口 韵母_ang 扩展 韵母 {
    标记: PY标记.韵母_ang;
}
导出 接口 韵母_eng 扩展 韵母 {
    标记: PY标记.韵母_eng;
}
导出 接口 韵母_ing 扩展 韵母 {
    标记: PY标记.韵母_ing;
}
导出 接口 韵母_ong 扩展 韵母 {
    标记: PY标记.韵母_ong;
}
导出 接口 韵母_un 扩展 韵母 {
    标记: PY标记.韵母_un;
}
导出 接口 韵母_ie 扩展 韵母 {
    标记: PY标记.韵母_ie;
}
导出 接口 韵母_ve 扩展 韵母 {
    标记: PY标记.韵母_ve;
}
导出 接口 韵母_ue 扩展 韵母 {
    标记: PY标记.韵母_ue;
}
导出 接口 韵母_vn 扩展 韵母 {
    标记: PY标记.韵母_vn;
}
导出 接口 韵母_er 扩展 韵母 {
    标记: PY标记.韵母_er;
}
导出 接口 拼音组 扩展 拼音节点 {
    内容组: 数组类<拼音节点>;
}
导出 枚举 PY标记 {
    结尾,
    单引号,
    逗号,
    声母_b,
    声母_p,
    声母_m,
    声母_f,
    声母_d,
    声母_t,
    声母_n,
    声母_l,
    声母_g,
    声母_k,
    声母_h,
    声母_j,
    声母_q,
    声母_x,
    声母_r,
    声母_z,
    声母_c,
    声母_s,
    声母_y,
    声母_w,
    声母_zh,
    声母_ch,
    声母_sh,
    韵母_a,
    韵母_o,
    韵母_e,
    韵母_i,
    韵母_u,
    韵母_v,
    韵母_an,
    韵母_en,
    韵母_vn,
    韵母_in,
    韵母_un,
    韵母_ao,
    韵母_ou,
    韵母_iu,
    韵母_ai,
    韵母_ei,
    韵母_ui,
    韵母_ie,
    韵母_ue,
    韵母_ve,
    韵母_er,
    韵母_ang,
    韵母_eng,
    韵母_ing,
    韵母_ong
}
导出 接口 九宫1 {
    文本: ["1"];
}
导出 接口 九宫0 {
    文本: ["0"];
}
导出 接口 九宫ABC {
    文本: ["abc,ABC2"];
}
导出 接口 九宫DEF {
    文本: ["def,DEF3"];
}
导出 接口 九宫GHI {
    文本: ["ghi,GHI4"];
}
导出 接口 九宫JKL {
    文本: ["jkl,JKL5"];
}
导出 接口 九宫MNO {
    文本: ["mno,MNO6"];
}
导出 接口 九宫PQRS {
    文本: ["pqrs,PQRS7"];
}
导出 接口 九宫TUV {
    文本: ["tuv,TUV8"];
}
导出 接口 九宫WXYZ {
    文本: ["wxyz,WXYZ9"];
}
导出 函数 转为文本(标记: PY标记) {
    返回 标记转文本[标记];
}
导出 常量 拼音正则 = /^[bpmfdtnlgkhjqxzcsrywaāáǎàoōóǒòeēéěèiīíǐìuūúǔùǖǘǚǜüv']+$/;
导出 函数 是拼音字符串(参数: 文字) {
    返回 拼音正则.测试(参数);
}
导出 函数 取拼音组拼音(拼音组: 拼音[]) {
    变量 结果: 文字[] = [];
    如果 (!拼音组 || !拼音组.长度) {
        返回 "";
    }
    拼音组.循环执行(v => {
        结果.压入(v.文本);
    });
    如果 (结果.长度 > 0) {
        返回 结果.连接("'");
    }
    返回 "";
}
导出 函数 取全拼索引(拼音组: 拼音[]) {
    变量 结果: 文字[] = [];
    如果 (!拼音组 || !拼音组.长度) {
        返回 [];
    }
    拼音组.循环执行(v => {
        结果.压入(v.文本);
    });
    如果 (结果.长度 > 0) {
        返回 结果;
    }
    返回 [];
}
导出 函数 取拼音组拼音去重(拼音组: 拼音[]) {
    变量 结果 = "";
    如果 (!拼音组 || !拼音组.长度) {
        返回 结果;
    }
    拼音组.循环执行(v => {
        如果 (结果.索引在(v.文本) === -1)
            结果 += "'" + v.文本;
    });
    返回 结果.子文字(1);
}
导出 函数 是韵母(p: 拼音节点): p 作为 韵母类型 {
    假如 (p.标记) {
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_v:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_ue:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_ve:
        如为 PY标记.韵母_er:
        如为 PY标记.韵母_un:
        如为 PY标记.韵母_vn:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_ong:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母(p: 拼音节点): p 作为 声母类型 {
    假如 (p.标记) {
        如为 PY标记.声母_b:
        如为 PY标记.声母_p:
        如为 PY标记.声母_m:
        如为 PY标记.声母_f:
        如为 PY标记.声母_d:
        如为 PY标记.声母_t:
        如为 PY标记.声母_n:
        如为 PY标记.声母_l:
        如为 PY标记.声母_g:
        如为 PY标记.声母_k:
        如为 PY标记.声母_h:
        如为 PY标记.声母_j:
        如为 PY标记.声母_q:
        如为 PY标记.声母_x:
        如为 PY标记.声母_zh:
        如为 PY标记.声母_ch:
        如为 PY标记.声母_sh:
        如为 PY标记.声母_r:
        如为 PY标记.声母_z:
        如为 PY标记.声母_c:
        如为 PY标记.声母_s:
        如为 PY标记.声母_y:
        如为 PY标记.声母_w:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母双拼韵母(p1: 声母, p2: 韵母) {
    假如 (p1.标记) {
        如为 PY标记.声母_b:
            返回 是声母b双拼韵母(p2);
        如为 PY标记.声母_p:
            返回 是声母p双拼韵母(p2);
        如为 PY标记.声母_m:
            返回 是声母m双拼韵母(p2);
        如为 PY标记.声母_f:
            返回 是声母f双拼韵母(p2);
        如为 PY标记.声母_d:
            返回 是声母d双拼韵母(p2);
        如为 PY标记.声母_t:
            返回 是声母t双拼韵母(p2);
        如为 PY标记.声母_n:
            返回 是声母n双拼韵母(p2);
        如为 PY标记.声母_l:
            返回 是声母l双拼韵母(p2);
        如为 PY标记.声母_g:
            返回 是声母g双拼韵母(p2);
        如为 PY标记.声母_k:
            返回 是声母k双拼韵母(p2);
        如为 PY标记.声母_h:
            返回 是声母h双拼韵母(p2);
        如为 PY标记.声母_j:
            返回 是声母j双拼韵母(p2);
        如为 PY标记.声母_q:
            返回 是声母q双拼韵母(p2);
        如为 PY标记.声母_x:
            返回 是声母x双拼韵母(p2);
        如为 PY标记.声母_zh:
            返回 是声母zh双拼韵母(p2);
        如为 PY标记.声母_ch:
            返回 是声母ch双拼韵母(p2);
        如为 PY标记.声母_sh:
            返回 是声母sh双拼韵母(p2);
        如为 PY标记.声母_r:
            返回 是声母r双拼韵母(p2);
        如为 PY标记.声母_z:
            返回 是声母z双拼韵母(p2);
        如为 PY标记.声母_c:
            返回 是声母c双拼韵母(p2);
        如为 PY标记.声母_s:
            返回 是声母s双拼韵母(p2);
        如为 PY标记.声母_y:
            返回 是声母y双拼韵母(p2);
        如为 PY标记.声母_w:
            返回 是声母w双拼韵母(p2);
        默认:
            返回 为假;
    }
}
导出 函数 是声母三拼韵母(p1: 声母, ps2: 三拼韵母组) {
    假如 (p1.标记) {
        如为 PY标记.声母_b:
            返回 是声母b三拼韵母(ps2);
        如为 PY标记.声母_p:
            返回 是声母p三拼韵母(ps2);
        如为 PY标记.声母_m:
            返回 是声母m三拼韵母(ps2);
        如为 PY标记.声母_f:
            返回 为假;
        如为 PY标记.声母_d:
            返回 是声母d三拼韵母(ps2);
        如为 PY标记.声母_t:
            返回 是声母t三拼韵母(ps2);
        如为 PY标记.声母_n:
            返回 是声母n三拼韵母(ps2);
        如为 PY标记.声母_l:
            返回 是声母l三拼韵母(ps2);
        如为 PY标记.声母_g:
            返回 是声母g三拼韵母(ps2);
        如为 PY标记.声母_k:
            返回 是声母g三拼韵母(ps2);
        如为 PY标记.声母_h:
            返回 是声母h三拼韵母(ps2);
        如为 PY标记.声母_j:
            返回 是声母j三拼韵母(ps2);
        如为 PY标记.声母_q:
            返回 是声母q三拼韵母(ps2);
        如为 PY标记.声母_x:
            返回 是声母x三拼韵母(ps2);
        如为 PY标记.声母_zh:
            返回 是声母zh三拼韵母(ps2);
        如为 PY标记.声母_ch:
            返回 是声母ch三拼韵母(ps2);
        如为 PY标记.声母_sh:
            返回 是声母sh三拼韵母(ps2);
        如为 PY标记.声母_r:
            返回 是声母r三拼韵母(ps2);
        如为 PY标记.声母_z:
            返回 是声母z三拼韵母(ps2);
        如为 PY标记.声母_c:
            返回 是声母c三拼韵母(ps2);
        如为 PY标记.声母_s:
            返回 是声母s三拼韵母(ps2);
        如为 PY标记.声母_y:
            返回 是声母y三拼韵母(ps2);
        如为 PY标记.声母_w:
            返回 为假;
        默认:
            返回 为假;
    }
}
导出 函数 是三拼无音韵母(p: 韵母): p 作为 三拼无音韵母 {
    返回 p.标记 === PY标记.韵母_i || p.标记 === PY标记.韵母_u;
}
导出 函数 是三拼韵母(p: 韵母): p 作为 三拼韵母 {
    假如 (p.标记) {
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ong:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母b(p: 拼音节点): p 作为 声母_b {
    返回 p.标记 === PY标记.声母_b;
}
导出 函数 是声母b双拼韵母(p: 拼音节点): p 作为 b可双拼韵母 {
    假如 (p.标记) {
        //韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_o | 韵母_u
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_u:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母b三拼韵母(p: 三拼韵母组): p 作为 b可三双拼韵母 {
    返回 p[0].标记 === PY标记.韵母_i && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_ao);
}
导出 函数 是声母p(p: 拼音节点): p 作为 声母_p {
    返回 p.标记 === PY标记.声母_p;
}
导出 函数 是声母p双拼韵母(p: 拼音节点): p 作为 p可双拼韵母 {
    假如 (p.标记) {
        // 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_o | 韵母_ou | 韵母_u
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_u:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母p三拼韵母(p: 三拼韵母组): p 作为 p可三双拼韵母 {
    返回 是声母b三拼韵母(p);
}
导出 函数 是声母m(p: 拼音节点): p 作为 声母_m {
    返回 p.标记 === PY标记.声母_m;
}
导出 函数 是声母m双拼韵母(p: 拼音节点): p 作为 m可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_iu | 韵母_o | 韵母_ou | 韵母_u
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_u:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母m三拼韵母(p: 三拼韵母组): p 作为 m可三双拼韵母 {
    返回 是声母b三拼韵母(p);
}
导出 函数 是声母f(p: 拼音节点): p 作为 声母_f {
    返回 p.标记 === PY标记.声母_f;
}
导出 函数 是声母f双拼韵母(p: 拼音节点): p 作为 f可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_an | 韵母_ang | 韵母_ei | 韵母_en | 韵母_eng | 韵母_o | 韵母_ou | 韵母_u
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_u:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母d(p: 拼音节点): p 作为 声母_d {
    返回 p.标记 === PY标记.声母_d;
}
导出 函数 是声母d双拼韵母(p: 拼音节点): p 作为 d可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ie | 韵母_ing | 韵母_iu | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母d三拼韵母(p: 三拼韵母组): p 作为 d可三双拼韵母 {
    返回 是声母b三拼韵母(p) || p[0].标记 == PY标记.韵母_u && (p[1].标记 === PY标记.韵母_o || p[1].标记 === PY标记.韵母_an);
}
导出 函数 是声母t(p: 拼音节点): p 作为 声母_t {
    返回 p.标记 === PY标记.声母_t;
}
导出 函数 是声母t双拼韵母(p: 拼音节点): p 作为 t可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_eng | 韵母_i | 韵母_ie | 韵母_ing | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母t三拼韵母(p: 三拼韵母组): p 作为 t可三双拼韵母 {
    返回 是声母d三拼韵母(p);
}
导出 函数 是声母n(p: 拼音节点): p 作为 声母_n {
    返回 p.标记 === PY标记.声母_n;
}
导出 函数 是声母n双拼韵母(p: 拼音节点): p 作为 n可双拼韵母 {
    假如 (p.标记) {
        //   韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei| 韵母_i | 韵母_en | 韵母_eng 
        // | 韵母_ing | 韵母_ie | 韵母_in | 韵母_iu | 韵母_ong | 韵母_ou | 韵母_u | 韵母_v | 韵母_ve | 韵母_ue | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_v:
        如为 PY标记.韵母_ve:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ue:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母n三拼韵母(p: 三拼韵母组): p 作为 n可三双拼韵母 {
    // [韵母_i, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_i, 韵母_ao] | [韵母_u, 韵母_an] | [韵母_u, 韵母_o]
    返回 (p[0].标记 === PY标记.韵母_i && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_ang || p[1].标记 === PY标记.韵母_ao)) || (p[0].标记 === PY标记.韵母_u && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_o));
}
导出 函数 是声母l(p: 拼音节点): p 作为 声母_l {
    返回 p.标记 === PY标记.声母_l;
}
导出 函数 是声母l双拼韵母(p: 拼音节点): p 作为 l可双拼韵母 {
    假如 (p.标记) {
        // 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_eng 
        // | 韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_iu | 韵母_ong | 韵母_ou | 韵母_u | 韵母_v | 韵母_ve | 韵母_ue | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_v:
        如为 PY标记.韵母_ve:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ue:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母l三拼韵母(p: 三拼韵母组): p 作为 l可三双拼韵母 {
    // [韵母_i, 韵母_a] | [韵母_i, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_i, 韵母_ao] | [韵母_u, 韵母_an] | [韵母_u, 韵母_e] | [韵母_u, 韵母_o]
    返回 (p[0].标记 === PY标记.韵母_i && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_ang || p[1].标记 === PY标记.韵母_ao))
        || (p[0].标记 === PY标记.韵母_u && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_e || p[1].标记 === PY标记.韵母_o));
}
导出 函数 是声母g(p: 拼音节点): p 作为 声母_g {
    返回 p.标记 === PY标记.声母_g;
}
导出 函数 是声母g双拼韵母(p: 拼音节点): p 作为 g可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng 
        // | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un 
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母g三拼韵母(p: 三拼韵母组): p 作为 g可三双拼韵母 {
    //[韵母_u, 韵母_a] | [韵母_u, 韵母_ai] | [韵母_u, 韵母_an] | [韵母_u, 韵母_ang] | [韵母_u, 韵母_o]
    返回 (p[0].标记 === PY标记.韵母_u &&
        (p[1].标记 === PY标记.韵母_a || p[1].标记 === PY标记.韵母_ai || p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_ang || p[1].标记 === PY标记.韵母_o));
}
导出 函数 是声母k(p: 拼音节点): p 作为 声母_k {
    返回 p.标记 === PY标记.声母_k;
}
导出 函数 是声母k双拼韵母(p: 拼音节点): p 作为 k可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_en | 韵母_eng | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母k三拼韵母(p: 三拼韵母组): p 作为 k可三双拼韵母 {
    返回 是声母g三拼韵母(p);
}
导出 函数 是声母h(p: 拼音节点): p 作为 声母_h {
    返回 p.标记 === PY标记.声母_h;
}
导出 函数 是声母h双拼韵母(p: 拼音节点): p 作为 h可双拼韵母 {
    返回 是声母g双拼韵母(p);
}
导出 函数 是声母h三拼韵母(p: 三拼韵母组): p 作为 h可三双拼韵母 {
    返回 是声母g三拼韵母(p);
}
导出 函数 是声母j(p: 拼音节点): p 作为 声母_j {
    返回 p.标记 === PY标记.声母_j;
}
导出 函数 是声母j双拼韵母(p: 拼音节点): p 作为 j可双拼韵母 {
    假如 (p.标记) {
        //   韵母_i | 韵母_ie | 韵母_in | 韵母_ing | 韵母_iu | 韵母_u | 韵母_un | 韵母_ue
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ie:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ue:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母j三拼韵母(p: 三拼韵母组): p 作为 j可三双拼韵母 {
    // [韵母_i, 韵母_a] | [韵母_i, 韵母_ai] | [韵母_i, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_i, 韵母_ong] | [韵母_u, 韵母_an] | [韵母_u, 韵母_e]
    返回 p[0].标记 === PY标记.韵母_i && (p[1].标记 === PY标记.韵母_a || p[1].标记 === PY标记.韵母_ai || p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_ao || p[1].标记 === PY标记.韵母_ang || p[1].标记 === PY标记.韵母_ong)
        || p[0].标记 === PY标记.韵母_u && (p[1].标记 === PY标记.韵母_an);
}
导出 函数 是声母q(p: 拼音节点): p 作为 声母_q {
    返回 p.标记 === PY标记.声母_q;
}
导出 函数 是声母q双拼韵母(p: 拼音节点): p 作为 q可双拼韵母 {
    返回 是声母j双拼韵母(p);
}
导出 函数 是声母q三拼韵母(p: 三拼韵母组): p 作为 q可三双拼韵母 {
    返回 是声母j三拼韵母(p);
}
导出 函数 是声母x(p: 拼音节点): p 作为 声母_x {
    返回 p.标记 === PY标记.声母_x;
}
导出 函数 是声母x双拼韵母(p: 拼音节点): p 作为 x可双拼韵母 {
    返回 是声母j双拼韵母(p);
}
导出 函数 是声母x三拼韵母(p: 三拼韵母组): p 作为 x可三双拼韵母 {
    返回 是声母j三拼韵母(p);
}
导出 函数 是声母zh(p: 拼音节点): p 作为 声母_zh {
    返回 p.标记 === PY标记.声母_zh;
}
导出 函数 是声母zh双拼韵母(p: 拼音节点): p 作为 zh可双拼韵母 {
    假如 (p.标记) {
        // 韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_iu:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母zh三拼韵母(p: 三拼韵母组): p 作为 zh可三双拼韵母 {
    // [韵母_u, 韵母_a] | [韵母_u, 韵母_ai] | [韵母_u, 韵母_an] | [韵母_u, 韵母_ang] | [韵母_u, 韵母_o]
    返回 (p[0].标记 === PY标记.韵母_u && (p[1].标记 === PY标记.韵母_a || p[1].标记 === PY标记.韵母_o || p[1].标记 === PY标记.韵母_ai || p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_ang));
}
导出 函数 是声母ch(p: 拼音节点): p 作为 声母_ch {
    返回 p.标记 === PY标记.声母_ch;
}
导出 函数 是声母ch双拼韵母(p: 拼音节点): p 作为 ch可双拼韵母 {
    返回 是声母r双拼韵母(p) || p.标记 === PY标记.韵母_a || p.标记 === PY标记.韵母_ai;
}
导出 函数 是声母ch三拼韵母(p: 三拼韵母组): p 作为 ch可三双拼韵母 {
    // [韵母_u, 韵母_a] | [韵母_u, 韵母_ai] | [韵母_u, 韵母_an] | [韵母_i, 韵母_ang] | [韵母_u, 韵母_o]
    返回 是声母zh三拼韵母(p);
}
导出 函数 是声母sh(p: 拼音节点): p 作为 声母_sh {
    返回 p.标记 === PY标记.声母_sh;
}
导出 函数 是声母sh双拼韵母(p: 拼音节点): p 作为 sh可双拼韵母 {
    假如 (p.标记) {
        //韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_ei | 韵母_en | 韵母_eng | 韵母_i | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母sh三拼韵母(p: 三拼韵母组): p 作为 ch可三双拼韵母 {
    // [韵母_u, 韵母_a] | [韵母_u, 韵母_ai] | [韵母_u, 韵母_an] | [韵母_u, 韵母_ang] | [韵母_u, 韵母_o]
    返回 是声母zh三拼韵母(p);
}
导出 函数 是声母r(p: 拼音节点): p 作为 声母_r {
    返回 p.标记 === PY标记.声母_r;
}
导出 函数 是声母r双拼韵母(p: 拼音节点): p 作为 r可双拼韵母 {
    假如 (p.标记) {
        // 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_en | 韵母_eng | 韵母_i | 韵母_ong | 韵母_ou | 韵母_u | 韵母_ui | 韵母_un
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_ui:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母r三拼韵母(p: 三拼韵母组): p 作为 r可三双拼韵母 {
    // [韵母_u, 韵母_an] | [韵母_u, 韵母_o]
    返回 p[0].标记 === PY标记.韵母_u && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_o);
}
导出 函数 是声母z(p: 拼音节点): p 作为 声母_z {
    返回 p.标记 === PY标记.声母_z;
}
导出 函数 是声母z双拼韵母(p: 拼音节点): p 作为 z可双拼韵母 {
    返回 是声母g双拼韵母(p) || p.标记 === PY标记.韵母_i;
}
导出 函数 是声母z三拼韵母(p: 三拼韵母组): p 作为 z可三双拼韵母 {
    返回 是声母r三拼韵母(p);
}
导出 函数 是声母c(p: 拼音节点): p 作为 声母_c {
    返回 p.标记 === PY标记.声母_c;
}
导出 函数 是声母c双拼韵母(p: 拼音节点): p 作为 c可双拼韵母 {
    返回 是声母ch双拼韵母(p);
}
导出 函数 是声母c三拼韵母(p: 三拼韵母组): p 作为 c可三双拼韵母 {
    返回 是声母r三拼韵母(p);
}
导出 函数 是声母s(p: 拼音节点): p 作为 声母_s {
    返回 p.标记 === PY标记.声母_s;
}
导出 函数 是声母s双拼韵母(p: 拼音节点): p 作为 s可双拼韵母 {
    返回 是声母c双拼韵母(p);
}
导出 函数 是声母s三拼韵母(p: 三拼韵母组): p 作为 s可三双拼韵母 {
    返回 是声母r三拼韵母(p);
}
导出 函数 是声母y(p: 拼音节点): p 作为 声母_y {
    返回 p.标记 === PY标记.声母_y;
}
导出 函数 是韵母a(p: 拼音节点): p 作为 韵母_a {
    返回 p.标记 === PY标记.韵母_a;
}
导出 函数 是韵母o(p: 拼音节点): p 作为 韵母_o {
    返回 p.标记 === PY标记.韵母_o;
}
导出 函数 是韵母e(p: 拼音节点): p 作为 韵母_e {
    返回 p.标记 === PY标记.韵母_e;
}
导出 函数 是韵母i(p: 拼音节点): p 作为 韵母_i {
    返回 p.标记 === PY标记.韵母_i;
}
导出 函数 是韵母u(p: 拼音节点): p 作为 韵母_u {
    返回 p.标记 === PY标记.韵母_u;
}
导出 函数 是韵母v(p: 拼音节点): p 作为 韵母_v {
    返回 p.标记 === PY标记.韵母_v;
}
导出 函数 是声母y双拼韵母(p: 拼音节点): p 作为 y可双拼韵母 {
    假如 (p.标记) {
        //  韵母_a | 韵母_an | 韵母_ang | 韵母_ao | 韵母_e | 韵母_i | 韵母_in | 韵母_ing |  韵母_ong | 韵母_ou | 韵母_u | 韵母_un
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ao:
        如为 PY标记.韵母_e:
        如为 PY标记.韵母_i:
        如为 PY标记.韵母_in:
        如为 PY标记.韵母_ing:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_ou:
        如为 PY标记.韵母_ong:
        如为 PY标记.韵母_u:
        如为 PY标记.韵母_un:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是声母y三拼韵母(p: 三拼韵母组): p 作为 r可三双拼韵母 {
    //  [韵母_u, 韵母_an] | [韵母_u, 韵母_e]
    返回 p[0].标记 === PY标记.韵母_u && (p[1].标记 === PY标记.韵母_an || p[1].标记 === PY标记.韵母_e);
}
导出 函数 是声母w(p: 拼音节点): p 作为 声母_w {
    返回 p.标记 === PY标记.声母_w;
}
导出 函数 是声母w双拼韵母(p: 拼音节点): p 作为 w可双拼韵母 {
    假如 (p.标记) {
        //   韵母_a | 韵母_ai | 韵母_an | 韵母_ang | 韵母_ei | 韵母_en | 韵母_eng | 韵母_o | 韵母_u
        如为 PY标记.韵母_a:
        如为 PY标记.韵母_ai:
        如为 PY标记.韵母_an:
        如为 PY标记.韵母_ang:
        如为 PY标记.韵母_ei:
        如为 PY标记.韵母_en:
        如为 PY标记.韵母_eng:
        如为 PY标记.韵母_o:
        如为 PY标记.韵母_u:
            返回 为真;
        默认:
            返回 为假;
    }
}
导出 函数 是单引号(p: 拼音节点): p 作为 单引号 {
    返回 p.标记 === PY标记.单引号;
}
导出 函数 是三拼韵母组(p: 韵母 | 三拼韵母组): p 作为 三拼韵母组 {
    返回 是数组(p);
}
导出 常量 标记转文本 = {
    [PY标记.结尾]: "",
    [PY标记.单引号]: "'",
    [PY标记.逗号]: ",",
    [PY标记.声母_b]: "b",
    [PY标记.声母_p]: "p",
    [PY标记.声母_m]: "m",
    [PY标记.声母_f]: "f",
    [PY标记.声母_d]: "d",
    [PY标记.声母_t]: "t",
    [PY标记.声母_n]: "n",
    [PY标记.声母_l]: "l",
    [PY标记.声母_g]: "g",
    [PY标记.声母_k]: "k",
    [PY标记.声母_h]: "h",
    [PY标记.声母_j]: "j",
    [PY标记.声母_q]: "q",
    [PY标记.声母_x]: "x",
    [PY标记.声母_zh]: "zh",
    [PY标记.声母_ch]: "ch",
    [PY标记.声母_sh]: "sh",
    [PY标记.声母_r]: "r",
    [PY标记.声母_z]: "z",
    [PY标记.声母_c]: "c",
    [PY标记.声母_s]: "s",
    [PY标记.声母_y]: "y",
    [PY标记.声母_w]: "w",
    [PY标记.韵母_a]: "a",
    [PY标记.韵母_an]: "an",
    [PY标记.韵母_ang]: "ang",
    [PY标记.韵母_ai]: "ai",
    [PY标记.韵母_ao]: "ao",
    [PY标记.韵母_o]: "o",
    [PY标记.韵母_ou]: "ou",
    [PY标记.韵母_ong]: "ong",
    [PY标记.韵母_e]: "e",
    [PY标记.韵母_ei]: "ei",
    [PY标记.韵母_er]: "er",
    [PY标记.韵母_en]: "en",
    [PY标记.韵母_eng]: "eng",
    [PY标记.韵母_i]: "i",
    [PY标记.韵母_ie]: "ie",
    [PY标记.韵母_iu]: "iu",
    [PY标记.韵母_in]: "in",
    [PY标记.韵母_ing]: "ing",
    [PY标记.韵母_u]: "u",
    [PY标记.韵母_ui]: "ui",
    [PY标记.韵母_ue]: "ue",
    [PY标记.韵母_un]: "un",
    [PY标记.韵母_v]: "v",
    [PY标记.韵母_ve]: "ve",
    [PY标记.韵母_vn]: "vn",
};
导出 函数 是双节声母(p: 声母) {
    返回 p.标记 === PY标记.声母_zh || p.标记 === PY标记.声母_ch || p.标记 === PY标记.声母_sh;
}
导出 函数 是双元韵母(p: 拼音节点) {
    返回 p.标记 >= PY标记.韵母_ao && p.标记 <= PY标记.韵母_er;
}
导出 函数 是单元韵母(p: 拼音节点) {
    返回 p.标记 >= PY标记.韵母_a && p.标记 <= PY标记.韵母_v;
}
导出 函数 是三元韵母(p: 拼音节点) {
    返回 p.标记 >= PY标记.韵母_ang && p.标记 <= PY标记.韵母_ong;
}
导出 函数 是三拼连读(p1: 拼音) {
    返回 p1.声母 && p1.韵母 && 是数组(p1.韵母);
}

导出 函数 是整体音读(p1: 拼音) {
    返回 p1.文本 === "zhi" || p1.文本 === "chi" || p1.文本 === "shi"
        || p1.文本 === "zi" || p1.文本 === "ci" || p1.文本 === "si"
        || p1.文本 === "ri"
        || p1.文本 === "yi" || p1.文本 === "yu" || p1.文本 === "ye" || p1.文本 === "yue" || p1.文本 === "yin"
        || p1.文本 === "yun" || p1.文本 === "ying" || p1.文本 === "yuan"
        || p1.文本 === "wu";
}

导出 函数 取拼音文本(p1?: 声母, p2?: 韵母, p3?: 三拼无音韵母) {
    如果 (p1 && p2 && p3) {
        返回 转为文本(p1.标记) + 转为文本(p3.标记) + 转为文本(p2.标记);
    }
    否则 如果 (p1 && p2) {
        返回 转为文本(p1.标记) + 转为文本(p2.标记);
    }
    否则 如果 (p1) {
        返回 转为文本(p1.标记);
    }
    否则 如果 (p2) {
        返回 转为文本(p2.标记);
    }
    否则 {
        返回 "";
    }
}

导出 函数 是分割符(py: 拼音) {
    返回 py.标记 === PY标记.单引号;
}

导出 函数 创建分隔符() {
    变量 拼音 = 创建对象<拼音>();
    拼音.标记 = PY标记.单引号;
    拼音.文本 = "'";
    返回 拼音;
}

导出 函数 创建拼音(p1?: 声母, p2?: 韵母, p3?: 三拼无音韵母) {
    变量 拼音 = 创建对象<拼音>();
    拼音.声母 = p1;
    拼音.韵母 = p3 && 是三拼韵母(p2) ? [p3, p2] : p2;
    拼音.文本 = 取拼音文本(p1, p2, p3);
    拼音.可分割 = (p1 && (是声母zh(p1) || 是声母ch(p1) || 是声母sh(p1))) || !!p3 || (p2 && p2.文本.长度 > 1);
    拼音.可拆分 = 拼音.可分割 ? 计算分割系数(p1, p2, p3) : 0;
    计算位置(拼音);
    返回 拼音;
}

导出 函数 计算位置(py: 拼音) {
    如果 (py.声母) {
        py.开始 = py.声母.开始;
    }
    如果 (!py.韵母) {
        py.结尾 == py.声母.结尾;
        返回;
    }
    如果 (py.韵母 && 是数组(py.韵母)) {
        变量 后 = py.韵母[1];
        py.结尾 = 后.结尾;
        如果 (!py.开始) {
            变量 前 = py.韵母[0];
            py.开始 = 前.开始;
        }
        返回;
    }
    否则 如果 (py.韵母 && !是数组(py.韵母)) {
        py.结尾 = py.韵母.结尾;
        如果 (!py.开始) {
            py.开始 = py.韵母.开始;
        }
        返回;
    }
    返回;
}

导出 函数 重组拼音(ps: 拼音[]) {
    变量 插入位置: 数字[] = [];
    变量 i = ps.长度 - 1;
    判断 (i >= 0) {
        变量 p = ps[i - 1];
        变量 p2 = ps[i];
        如果 (p2) {
            如果 (!p2.声母 && p && p.可拆分 & 拼音拆分标记.可分割出声母) {
                如果 (p.可拆分 & 拼音拆分标记.可分割出声母) {
                    变量 p2韵母 = p2.韵母;
                    变量 验证: 韵母 | 三拼韵母组 = p2韵母;
                    如果 (!是数组(p2.韵母)) {
                        如果 (是韵母i(p2.韵母 转为 韵母) || 是韵母u(p2.韵母 转为 韵母)) {
                            // 可组 三拼
                            变量 p3 = ps[i + 1];
                            如果 (p3 && !p3.声母) {
                                验证 = [p2.韵母, p3.韵母] 转为 三拼韵母组;
                            }
                        }
                    }
                    变量 通过验证 = 为假;
                    如果 (p.可拆分 & 拼音拆分标记.可分割出尾声母g) {
                        如果 (是数组(验证) && 是声母g三拼韵母(验证)) {
                            通过验证 = 为真;
                        }
                        否则 如果 (是声母g双拼韵母(验证 转为 韵母)) {
                            通过验证 = 为真;
                        }
                    }
                    否则 如果 (p.可拆分 & 拼音拆分标记.可分割出尾声母n) {
                        如果 (是数组(验证) && 是声母n三拼韵母(验证)) {
                            通过验证 = 为真;
                        }
                        否则 如果 (是声母n双拼韵母(验证 转为 韵母)) {
                            通过验证 = 为真;
                        }
                    }
                    否则 如果 (p.可拆分 & 拼音拆分标记.可分割出尾声母r) {
                        如果 (是数组(验证) && 是声母r三拼韵母(验证)) {
                            通过验证 = 为真;
                        }
                        否则 如果 (是声母r双拼韵母(验证 转为 韵母)) {
                            通过验证 = 为真;
                        }
                    }
                    通过验证 ? 插入位置.压入(取拼音开始位置(p2) - 1) : 未定;
                }
            }
        }
        i--;
    }
    变量 重新编译 = 插入位置.长度 ? 插入分隔(取拼音组原始文本(ps), 插入位置) : 空值;
    返回 重新编译 ? 编译拼音(重新编译) : ps;
}

函数 取拼音开始位置(p: 拼音) {
    如果 (p.声母) {
        返回 p.声母.开始;
    }
    否则 如果 (p.韵母) {
        如果 (是数组(p.韵母)) {
            返回 p.韵母[0].开始;
        }
        否则 {
            返回 p.韵母.开始;
        }
    }
}

导出 函数 插入分隔(拼音组文本: 文字, 位置: 数字[]) {
    变量 结果: 文字[] = [];
    循环 (变量 i = 0, ii = 0, iii: 数字; i < 位置.长度; i++) {
        iii = 位置[i];
        结果.压入(拼音组文本.子文字(ii, iii));
        如果 (i === 位置.长度 - 1) {
            结果.压入(拼音组文本.子文字(iii));
        }
        ii = iii;
    }
    返回 结果.连接("'");
}

导出 函数 取拼音组原始文本(拼音组: 拼音[]) {
    变量 结果 = "";
    拼音组.循环执行(v => {
        结果 += v.文本;
    });
    返回 结果;
}

导出 枚举 拼音拆分标记 {
    无 = 0,
    可分割成两部分 = 1,
    可分割成三部分 = 1 << 1,
    可分割出尾单韵母 = 1 << 2,
    可分割出尾声母g = 1 << 3,
    可分割出尾声母n = 1 << 4,
    可分割出尾声母r = 1 << 5,
    可分割出声母 = 可分割出尾声母g | 可分割出尾声母n | 可分割出尾声母r
}

导出 函数 计算分割系数(p1: 声母, p2: 韵母, p3: 韵母) {
    变量 结果: 数字 = 拼音拆分标记.无;
    如果 (p1 && p2 && p3) {
        如果 (是整体音读({ 声母: p1, 韵母: [p3, p2] } 转为 拼音)) {
            返回 拼音拆分标记.无;
        }
        结果 |= 拼音拆分标记.可分割成三部分;
    }
    如果 (p1 && p2 && !p3) {
        结果 |= 拼音拆分标记.可分割成两部分;
    }
    如果 (p2) {
        如果 (是g尾韵母且不是ong(p2)) {
            结果 |= 拼音拆分标记.可分割出尾声母g;
        }
        如果 (是n尾韵母(p2)) {
            结果 |= 拼音拆分标记.可分割出尾声母n;
        }
        如果 (是r尾韵母(p2)) {
            结果 |= 拼音拆分标记.可分割出尾声母r;
        }
        如果 (是双元韵母(p2) && !是r尾韵母(p2)) {
            结果 |= 拼音拆分标记.可分割出尾单韵母;
        }
    }
    返回 结果;
}

函数 是n尾韵母(p: 韵母) {
    返回 p.标记 >= PY标记.韵母_an && p.标记 <= PY标记.韵母_un;
}
函数 是r尾韵母(p: 韵母) {
    返回 p.标记 === PY标记.韵母_er;
}
函数 是g尾韵母且不是ong(p: 韵母) {
    返回 p.标记 === PY标记.韵母_ang || p.标记 === PY标记.韵母_eng || p.标记 === PY标记.韵母_ing;
}

导出 函数 编译拼音(拼音文本: 文字): 拼音[] {
    尝试 {
        拼音文本 = 拼音文本.替换(/\s+/g, "");
        变量 拼音 = 拼音文本扫描(拼音文本);
        变量 结果: 拼音[] = [];
        如果 (拼音 && 拼音.内容组.长度) {
            变量 前 = 0;
            判断 (前 < 拼音.内容组.长度) {
                变量 p = 拼音.内容组[前];
                如果 (是单引号(p)) {
                    前++;
                }
                否则 如果 (是声母(p)) {
                    变量 p2 = 拼音.内容组[前 + 1];
                    如果 (p2 && 是单引号(p2)) {
                        // 分隔符强行分割
                        前++;
                        结果.压入(创建拼音(p));
                        继续;
                    }
                    否则 如果 (p2 && 是韵母(p2)) {
                        如果 (p2 && 是三拼无音韵母(p2)) {
                            变量 p3 = 拼音.内容组[前 + 2];
                            如果 (p3 && 是韵母(p3) && 是三拼韵母(p3) && 是声母三拼韵母(p, [p2, p3])) {
                                // 三拼
                                前 += 3;
                                结果.压入(创建拼音(p, p3, p2));
                                继续;
                            }
                            否则 如果 (是声母双拼韵母(p, p2)) {
                                // 与 三拼无音字母 双拼
                                前 += 2;
                                结果.压入(创建拼音(p, p2));
                                继续;
                            }
                        }
                        否则 如果 (p2 && 是声母双拼韵母(p, p2)) {
                            // 双拼
                            前 += 2;
                            结果.压入(创建拼音(p, p2));
                            继续;
                        }
                    }
                    // p 是独立声母
                    前++;
                    结果.压入(创建拼音(p));
                    继续;
                }
                否则 如果 (是韵母(p)) {
                    // 是独立 韵母
                    前++;
                    结果.压入(创建拼音(未定, p));
                    继续;
                }
            }
        }
        如果 (结果 && 结果.长度) {
            返回 结果;
        }
    }
    捕获 (err) {
        返回;
    }
}

导出 函数 拼音文本扫描(p: 文字): 拼音组 {
    p = p.转为小写();
    如果 (!是拼音字符串(p)) {
        返回;
    }
    变量 前 = 0;
    变量 后 = 前;
    变量 当前语义: PY标记;

    返回 编译();

    函数 创建拼音组(初始组?: 数组类<拼音节点>) {
        变量 拼音组 = 创建对象<拼音组>();
        拼音组.开始 = 0;
        拼音组.结尾 = p.长度;
        拼音组.内容组 = 初始组 || [];
        返回 拼音组;
    }
    函数 创建拼音节点<T 扩展 拼音节点>(标记: T["标记"]): T {
        变量 拼音 = 创建对象<T>();
        拼音.标记 = 标记;
        拼音.开始 = 取开始();
        拼音.结尾 = 取结尾();
        拼音.文本 = 转为文本(拼音.标记);
        当前语义 = 下个();
        返回 拼音;
    }
    函数 编译() {
        变量 拼音组 = 创建拼音组();
        当前语义 = 下个();
        标签: 判断 (为真) {
            假如 (当前语义) {
                如为 PY标记.结尾:
                    跳出 标签;
                如为 PY标记.单引号:
                    拼音组.内容组.压入(创建拼音节点<单引号>(PY标记.单引号));
                    跳出;
                如为 PY标记.声母_b:
                    拼音组.内容组.压入(创建拼音节点<声母_b>(PY标记.声母_b));
                    跳出;
                如为 PY标记.声母_p:
                    拼音组.内容组.压入(创建拼音节点<声母_p>(PY标记.声母_p));
                    跳出;
                如为 PY标记.声母_m:
                    拼音组.内容组.压入(创建拼音节点<声母_m>(PY标记.声母_m));
                    跳出;
                如为 PY标记.声母_f:
                    拼音组.内容组.压入(创建拼音节点<声母_f>(PY标记.声母_f));
                    跳出;
                如为 PY标记.声母_d:
                    拼音组.内容组.压入(创建拼音节点<声母_d>(PY标记.声母_d));
                    跳出;
                如为 PY标记.声母_t:
                    拼音组.内容组.压入(创建拼音节点<声母_t>(PY标记.声母_t));
                    跳出;
                如为 PY标记.声母_n:
                    拼音组.内容组.压入(创建拼音节点<声母_n>(PY标记.声母_n));
                    跳出;
                如为 PY标记.声母_l:
                    拼音组.内容组.压入(创建拼音节点<声母_l>(PY标记.声母_l));
                    跳出;
                如为 PY标记.声母_g:
                    拼音组.内容组.压入(创建拼音节点<声母_g>(PY标记.声母_g));
                    跳出;
                如为 PY标记.声母_k:
                    拼音组.内容组.压入(创建拼音节点<声母_k>(PY标记.声母_k));
                    跳出;
                如为 PY标记.声母_h:
                    拼音组.内容组.压入(创建拼音节点<声母_h>(PY标记.声母_h));
                    跳出;
                如为 PY标记.声母_j:
                    拼音组.内容组.压入(创建拼音节点<声母_j>(PY标记.声母_j));
                    跳出;
                如为 PY标记.声母_q:
                    拼音组.内容组.压入(创建拼音节点<声母_q>(PY标记.声母_q));
                    跳出;
                如为 PY标记.声母_x:
                    拼音组.内容组.压入(创建拼音节点<声母_x>(PY标记.声母_x));
                    跳出;
                如为 PY标记.声母_zh:
                    拼音组.内容组.压入(创建拼音节点<声母_zh>(PY标记.声母_zh));
                    跳出;
                如为 PY标记.声母_ch:
                    拼音组.内容组.压入(创建拼音节点<声母_ch>(PY标记.声母_ch));
                    跳出;
                如为 PY标记.声母_sh:
                    拼音组.内容组.压入(创建拼音节点<声母_sh>(PY标记.声母_sh));
                    跳出;
                如为 PY标记.声母_r:
                    拼音组.内容组.压入(创建拼音节点<声母_r>(PY标记.声母_r));
                    跳出;
                如为 PY标记.声母_z:
                    拼音组.内容组.压入(创建拼音节点<声母_z>(PY标记.声母_z));
                    跳出;
                如为 PY标记.声母_c:
                    拼音组.内容组.压入(创建拼音节点<声母_c>(PY标记.声母_c));
                    跳出;
                如为 PY标记.声母_s:
                    拼音组.内容组.压入(创建拼音节点<声母_s>(PY标记.声母_s));
                    跳出;
                如为 PY标记.声母_y:
                    拼音组.内容组.压入(创建拼音节点<声母_y>(PY标记.声母_y));
                    跳出;
                如为 PY标记.声母_w:
                    拼音组.内容组.压入(创建拼音节点<声母_w>(PY标记.声母_w));
                    跳出;
                // 韵母
                如为 PY标记.韵母_a:
                    拼音组.内容组.压入(创建拼音节点<韵母_a>(PY标记.韵母_a));
                    跳出;
                如为 PY标记.韵母_o:
                    拼音组.内容组.压入(创建拼音节点<韵母_o>(PY标记.韵母_o));
                    跳出;
                如为 PY标记.韵母_e:
                    拼音组.内容组.压入(创建拼音节点<韵母_e>(PY标记.韵母_e));
                    跳出;
                如为 PY标记.韵母_i:
                    拼音组.内容组.压入(创建拼音节点<韵母_i>(PY标记.韵母_i));
                    跳出;
                如为 PY标记.韵母_u:
                    拼音组.内容组.压入(创建拼音节点<韵母_u>(PY标记.韵母_u));
                    跳出;
                如为 PY标记.韵母_v:
                    拼音组.内容组.压入(创建拼音节点<韵母_v>(PY标记.韵母_v));
                    跳出;
                如为 PY标记.韵母_ai:
                    拼音组.内容组.压入(创建拼音节点<韵母_ai>(PY标记.韵母_ai));
                    跳出;
                如为 PY标记.韵母_ei:
                    拼音组.内容组.压入(创建拼音节点<韵母_ei>(PY标记.韵母_ei));
                    跳出;
                如为 PY标记.韵母_ui:
                    拼音组.内容组.压入(创建拼音节点<韵母_ui>(PY标记.韵母_ui));
                    跳出;
                如为 PY标记.韵母_ao:
                    拼音组.内容组.压入(创建拼音节点<韵母_ao>(PY标记.韵母_ao));
                    跳出;
                如为 PY标记.韵母_ou:
                    拼音组.内容组.压入(创建拼音节点<韵母_ou>(PY标记.韵母_ou));
                    跳出;
                如为 PY标记.韵母_iu:
                    拼音组.内容组.压入(创建拼音节点<韵母_iu>(PY标记.韵母_iu));
                    跳出;
                如为 PY标记.韵母_ie:
                    拼音组.内容组.压入(创建拼音节点<韵母_ie>(PY标记.韵母_ie));
                    跳出;
                如为 PY标记.韵母_ve:
                    拼音组.内容组.压入(创建拼音节点<韵母_ve>(PY标记.韵母_ve));
                    跳出;
                如为 PY标记.韵母_ue:
                    拼音组.内容组.压入(创建拼音节点<韵母_ue>(PY标记.韵母_ue));
                    跳出;
                如为 PY标记.韵母_un:
                    拼音组.内容组.压入(创建拼音节点<韵母_un>(PY标记.韵母_un));
                    跳出;
                如为 PY标记.韵母_er:
                    拼音组.内容组.压入(创建拼音节点<韵母_er>(PY标记.韵母_er));
                    跳出;
                如为 PY标记.韵母_an:
                    拼音组.内容组.压入(创建拼音节点<韵母_an>(PY标记.韵母_an));
                    跳出;
                如为 PY标记.韵母_en:
                    拼音组.内容组.压入(创建拼音节点<韵母_en>(PY标记.韵母_en));
                    跳出;
                如为 PY标记.韵母_in:
                    拼音组.内容组.压入(创建拼音节点<韵母_in>(PY标记.韵母_in));
                    跳出;
                如为 PY标记.韵母_ang:
                    拼音组.内容组.压入(创建拼音节点<韵母_ang>(PY标记.韵母_ang));
                    跳出;
                如为 PY标记.韵母_eng:
                    拼音组.内容组.压入(创建拼音节点<韵母_eng>(PY标记.韵母_eng));
                    跳出;
                如为 PY标记.韵母_ing:
                    拼音组.内容组.压入(创建拼音节点<韵母_ing>(PY标记.韵母_ing));
                    跳出;
                如为 PY标记.韵母_ong:
                    拼音组.内容组.压入(创建拼音节点<韵母_ong>(PY标记.韵母_ong));
                    跳出;
            }
        }
        返回 拼音组;
    }
    函数 下个() {
        返回 扫描();
    }
    函数 取开始() {
        返回 数学类.min(后, 前);
    }
    函数 取结尾() {
        返回 数学类.max(后, 前);
    }
    函数 扫描() {
        后 = 前;
        判断 (为真) {
            如果 (前 >= p.长度) {
                返回 PY标记.结尾;
            }
            变量 ch = p.字符代码在(前);
            假如 (ch) {
                如为 Py.单引号:
                    前++;
                    返回 PY标记.单引号;
                如为 Py.b:
                    前++;
                    返回 PY标记.声母_b;
                如为 Py.p:
                    前++;
                    返回 PY标记.声母_p;
                如为 Py.m:
                    前++;
                    返回 PY标记.声母_m;
                如为 Py.f:
                    前++;
                    返回 PY标记.声母_f;
                如为 Py.d:
                    前++;
                    返回 PY标记.声母_d;
                如为 Py.t:
                    前++;
                    返回 PY标记.声母_t;
                如为 Py.j:
                    前++;
                    返回 PY标记.声母_j;
                如为 Py.q:
                    前++;
                    返回 PY标记.声母_q;
                如为 Py.x:
                    前++;
                    返回 PY标记.声母_x;
                如为 Py.l:
                    前++;
                    返回 PY标记.声母_l;
                如为 Py.k:
                    前++;
                    返回 PY标记.声母_k;
                如为 Py.w:
                    前++;
                    返回 PY标记.声母_w;
                如为 Py.y:
                    前++;
                    返回 PY标记.声母_y;
                如为 Py.n:
                    如果 (!(p.字符代码在(前 - 1) === Py.a || p.字符代码在(前 - 1) === Py.a1 || p.字符代码在(前 - 1) === Py.a2 || p.字符代码在(前 - 1) === Py.a3 || p.字符代码在(前 - 1) === Py.a4
                        || (p.字符代码在(前 - 1) === Py.o || p.字符代码在(前 - 1) === Py.o1 || p.字符代码在(前 - 1) === Py.o2 || p.字符代码在(前 - 1) === Py.o3 || p.字符代码在(前 - 1) === Py.o4) && p.字符代码在(前 + 1) === Py.g
                        || p.字符代码在(前 - 1) === Py.e || p.字符代码在(前 - 1) === Py.e1 || p.字符代码在(前 - 1) === Py.e2 || p.字符代码在(前 - 1) === Py.e3 || p.字符代码在(前 - 1) === Py.e4
                        || (p.字符代码在(前 - 1) === Py.i || p.字符代码在(前 - 1) === Py.i1 || p.字符代码在(前 - 1) === Py.i2 || p.字符代码在(前 - 1) === Py.i3 || p.字符代码在(前 - 1) === Py.i4) && p.字符代码在(前 + 1) === Py.g
                        || p.字符代码在(前 - 1) === Py.u || p.字符代码在(前 - 1) === Py.u1 || p.字符代码在(前 - 1) === Py.u2 || p.字符代码在(前 - 1) === Py.u3 || p.字符代码在(前 - 1) === Py.u4
                        || p.字符代码在(前 - 1) === Py.v || p.字符代码在(前 - 1) === Py.v0 || p.字符代码在(前 - 1) === Py.v1 || p.字符代码在(前 - 1) === Py.v2 || p.字符代码在(前 - 1) === Py.v3 || p.字符代码在(前 - 1) === Py.v4)) {
                        前++;
                        返回 PY标记.声母_n;
                    }
                    跳出;
                如为 Py.g:
                    如果 (!(p.字符代码在(前 - 1) === Py.n && (p.字符代码在(前 - 2) === Py.a || p.字符代码在(前 - 2) === Py.a1 || p.字符代码在(前 - 2) === Py.a2 || p.字符代码在(前 - 2) === Py.a3 || p.字符代码在(前 - 2) === Py.a4
                        || p.字符代码在(前 - 2) === Py.o || p.字符代码在(前 - 2) === Py.o1 || p.字符代码在(前 - 2) === Py.o2 || p.字符代码在(前 - 2) === Py.o3 || p.字符代码在(前 - 2) === Py.o4
                        || p.字符代码在(前 - 2) === Py.e || p.字符代码在(前 - 2) === Py.e1 || p.字符代码在(前 - 2) === Py.e2 || p.字符代码在(前 - 2) === Py.e3 || p.字符代码在(前 - 2) === Py.e4
                        || p.字符代码在(前 - 2) === Py.i || p.字符代码在(前 - 2) === Py.i1 || p.字符代码在(前 - 2) === Py.i2 || p.字符代码在(前 - 2) === Py.i3 || p.字符代码在(前 - 2) === Py.i4))) {
                        前++;
                        返回 PY标记.声母_g;
                    }
                    跳出;
                如为 Py.h:
                    如果 (p.字符代码在(前 - 1) === Py.z) {
                        前++;
                        返回 PY标记.声母_zh;
                    }
                    否则 如果 (p.字符代码在(前 - 1) === Py.c) {
                        前++;
                        返回 PY标记.声母_ch;
                    }
                    如果 (p.字符代码在(前 - 1) === Py.s) {
                        前++;
                        返回 PY标记.声母_sh;
                    }
                    否则 {
                        前++;
                        返回 PY标记.声母_h;
                    }
                如为 Py.z:
                    如果 (p.字符代码在(前 + 1) !== Py.h) {
                        前++;
                        返回 PY标记.声母_z;
                    }
                    跳出;
                如为 Py.c:
                    如果 (p.字符代码在(前 + 1) !== Py.h) {
                        前++;
                        返回 PY标记.声母_c;
                    }
                    跳出;
                如为 Py.s:
                    如果 (p.字符代码在(前 + 1) !== Py.h) {
                        前++;
                        返回 PY标记.声母_s;
                    }
                    跳出;
                如为 Py.r:
                    如果 (p.字符代码在(前 - 1) !== Py.e) {
                        前++;
                        返回 PY标记.声母_r;
                    }
                    跳出;
                默认:
                    如果 (ch === Py.a || ch === Py.a1 || ch === Py.a2 || ch === Py.a3 || ch === Py.a4) {
                        如果 (p.字符代码在(前 + 1) === Py.o) {
                            前 += 2;
                            返回 PY标记.韵母_ao;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.i) {
                            前 += 2;
                            返回 PY标记.韵母_ai;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.n && p.字符代码在(前 + 2) === Py.g) {
                            前 += 3;
                            返回 PY标记.韵母_ang;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.n) {
                            前++;
                            返回 PY标记.韵母_an;
                        }
                        否则 {
                            前++;
                            返回 PY标记.韵母_a;
                        }
                    }
                    否则 如果 (ch === Py.o || ch === Py.o1 || ch === Py.o2 || ch === Py.o3 || ch === Py.o4) {
                        如果 (p.字符代码在(前 + 1) === Py.n && p.字符代码在(前 + 2) === Py.g) {
                            前 += 3;
                            返回 PY标记.韵母_ong;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.u) {
                            前 += 2;
                            返回 PY标记.韵母_ou;
                        }
                        否则 {
                            前++;
                            返回 PY标记.韵母_o;
                        }
                    }
                    否则 如果 (ch === Py.e || ch === Py.e1 || ch === Py.e2 || ch === Py.e3 || ch === Py.e4) {
                        如果 (p.字符代码在(前 + 1) === Py.n && p.字符代码在(前 + 2) === Py.g) {
                            前 += 3;
                            返回 PY标记.韵母_eng;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.n) {
                            前 += 2;
                            返回 PY标记.韵母_en;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.r) {
                            前 += 2;
                            返回 PY标记.韵母_er;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.i) {
                            前 += 2;
                            返回 PY标记.韵母_ei;
                        }
                        否则 {
                            前++;
                            返回 PY标记.韵母_e;
                        }
                    }
                    否则 如果 (ch === Py.i || ch === Py.i1 || ch === Py.i2 || ch === Py.i3 || ch === Py.i4) {
                        如果 (p.字符代码在(前 + 1) === Py.n && p.字符代码在(前 + 2) === Py.g) {
                            前 += 3;
                            返回 PY标记.韵母_ing;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.n) {
                            前 += 2;
                            返回 PY标记.韵母_in;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.u || p.字符代码在(前 + 1) === Py.u1 || p.字符代码在(前 + 1) === Py.u2 || p.字符代码在(前 + 1) === Py.u3 || p.字符代码在(前 + 1) === Py.u4) {
                            前 += 2;
                            返回 PY标记.韵母_iu;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.e) {
                            前 += 2;
                            返回 PY标记.韵母_ie;
                        }
                        否则 {
                            前++;
                            返回 PY标记.韵母_i;
                        }
                    }
                    否则 如果 (ch === Py.u || ch === Py.u1 || ch === Py.u2 || ch === Py.u3 || ch === Py.u4) {
                        如果 (p.字符代码在(前 + 1) === Py.n) {
                            前 += 2;
                            返回 PY标记.韵母_un;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.i || p.字符代码在(前 + 1) === Py.i1 || p.字符代码在(前 + 1) === Py.i2 || p.字符代码在(前 + 1) === Py.i3 || p.字符代码在(前 + 1) === Py.i4) {
                            前 += 2;
                            返回 PY标记.韵母_ui;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.e) {
                            前 += 2;
                            返回 PY标记.韵母_ue;
                        }
                        否则 {
                            前++;
                            返回 PY标记.韵母_u;
                        }
                    }
                    否则 如果 (ch === Py.v || ch === Py.v0 || ch === Py.v1 || ch === Py.v2 || ch === Py.v3 || ch === Py.v4) {
                        如果 (p.字符代码在(前 + 1) === Py.n) {
                            前 += 2;
                            返回 PY标记.韵母_vn;
                        }
                        否则 如果 (p.字符代码在(前 + 1) === Py.e) {
                            前 += 2;
                            返回 PY标记.韵母_ve;
                        }
                        否则 {
                            前++;
                            返回 PY标记.韵母_v;
                        }
                    }
                    跳出;
            }
            前++;
        }
    }
}

导出 函数 拼音是相等的(p1: 拼音[], p2: 拼音[]) {
    如果 (p1 && p2) {
        如果 (p1.长度 !== p2.长度) {
            返回 为假;
        }
        循环 (变量 i = 0; i < p1.长度; i++) {
            如果 (p1[i].文本 !== p2[i].文本) {
                返回 为假;
            }
        }
        返回 为真;
    }
    返回 为假;
}

导出 函数 是简拼索引(key: 文字) {
    变量 组 = key.分割("'");
    循环 (变量 i = 0; i < 组.长度; i++) {
        如果 (组[i].长度 > 2) {
            返回 为假;
        }
        否则 如果 (!是首拼字母(组[i])) {
            返回 为假;
        }
    }
    返回 为真;
}

导出 函数 是首拼字母(py: 文字) {
    假如 (py) {
        如为 "a":
        如为 "o":
        如为 "e":
        如为 "i":
        如为 "u":
        如为 "v":
        如为 "b":
        如为 "p":
        如为 "m":
        如为 "f":
        如为 "d":
        如为 "t":
        如为 "n":
        如为 "l":
        如为 "g":
        如为 "k":
        如为 "h":
        如为 "j":
        如为 "q":
        如为 "x":
        如为 "z":
        如为 "c":
        如为 "s":
        如为 "r":
        如为 "zh":
        如为 "ch":
        如为 "sh":
        如为 "y":
        如为 "w":
            返回 为真;
        默认:
            返回 为假;
    }
}

导出 函数 中间有分割符(p: 拼音, p2: 拼音) {
    如果 (p.开始 === p2.开始) {
        返回 为假;
    }
    变量 前面 = p.开始 > p2.开始 ? p2 : p;
    变量 后面 = p.开始 > p2.开始 ? p : p2;
    如果 (前面.结尾 !== 后面.开始) {
        返回 为真;
    }
    返回 为假;
}

导出 函数 取拼音索引简拼(拼音文本: 文字) {
    变量 ch = 拼音文本.字符代码在(0);
    如果 (ch === Py.c || ch === Py.z || ch === Py.s) {
        变量 ch2 = 拼音文本.字符代码在(1);
        如果 (ch2 === Py.h)
            返回 拼音文本.分裂(0, 2);
    }
    返回 拼音文本[0];
}
