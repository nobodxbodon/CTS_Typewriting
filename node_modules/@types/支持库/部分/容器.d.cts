/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/// <引用 不使用默认支持库= "真"/>
//@@{ 映射类:Map }
//@@{ 映射构造函数类:MapConstructor }
//@@{ 弱映射构造函数类:WeakMapConstructor }
//@@{ 集合构造函数类:SetConstructor }
//@@{ 弱集合构造函数类:WeakSetConstructor }
接口 映射类<K, V> {
    //@@{ 清除:clear }
    清除(): 无值;
    //@@{ 删除:delete, 键:key }
    删除(键: K): 真假;
    //@@{ 映射类:Map }
    //@@{ 循环执行:forEach, 回调函数:callbackfn, 值:value, 键:key, 映射:map, 本体参数:thisArg }
    循环执行(回调函数: (值: V, 键: K, 映射: 映射类<K, V>) => 无值, 本体参数?: 任意): 无值;
    //@@{ 获取:get, 键:key }
    获取(键: K): V | 未定;
    //@@{ 存在:has, 键:key }
    存在(键: K): 真假;
    //@@{ 设置:set, 存在:key, 值:value }
    设置(存在: K, 值: V): 本体;
    //@@{ 大小:size }
    只读 大小: 数字;
}
//@@{ 映射类:Map }
//@@{ 映射构造函数类:MapConstructor }
//@@{ 条目集:entries, 原型:prototype }
接口 映射构造函数类 {
    新建 (): 映射类<任意, 任意>;
    新建 <K, V>(条目集?: [K, V][]): 映射类<K, V>;
    只读 原型: 映射类<任意, 任意>;
}

//@@{ 映射类:Map }
声明 值量 映射类: 映射构造函数类;
//@@{ 只读映射类:ReadonlyMap }
接口 只读映射类<K, V> {
    //@@{ 只读映射类:ReadonlyMap }
    //@@{ 循环执行:forEach, 回调函数:callbackfn, 值:value, 键:key, 映射:map, 本体参数:thisArg }
    循环执行(回调函数: (值: V, 键: K, 映射: 只读映射类<K, V>) => 无值, 本体参数?: 任意): 无值;
    //@@{ 获取:get, 键:key }
    获取(键: K): V | 未定;
    //@@{ 存在:has, 键:key }
    存在(键: K): 真假;
    //@@{ 大小:size }
    只读 大小: 数字;
}
//@@{ 弱映射类:WeakMap, 删除:delete, 键:key, 获取:get, 键:key, 存在:has, 键:key, 设置:set, 键:key, 值:value }
接口 弱映射类<K 扩展 实例, V> {
    删除(键: K): 真假;
    获取(键: K): V | 未定;
    存在(键: K): 真假;
    设置(键: K, 值: V): 本体;
}
//@@{ 弱映射构造函数类:WeakMapConstructor }
//@@{ 条目集:entries, 原型:prototype }
接口 弱映射构造函数类 {
    新建 (): 弱映射类<实例, 任意>;
    新建 <K 扩展 实例, V>(条目集?: [K, V][]): 弱映射类<K, V>;
    只读 原型: 弱映射类<实例, 任意>;
}

//@@{ 弱映射类:WeakMap }
声明 值量 弱映射类: 弱映射构造函数类;

//@@{ 集合类:Set }
//@@{ 添加:add, 清除:clear, 删除:delete, 循环执行:forEach, 回调函数:callbackfn }
//@@{ 值2:value2, 集合:set, 本体参数:thisArg, 存在:has, 值:value, 大小:size }
接口 集合类<T> {
    添加(值: T): 本体;
    清除(): 无值;
    删除(值: T): 真假;
    循环执行(回调函数: (值: T, 值2: T, 集合: 集合类<T>) => 无值, 本体参数?: 任意): 无值;
    存在(值: T): 真假;
    只读 大小: 数字;
}
//@@{ 集合构造函数类:SetConstructor }
//@@{ 值集:values, 原型:prototype }
接口 集合构造函数类 {
    新建 (): 集合类<任意>;
    新建 <T>(值集?: T[]): 集合类<T>;
    只读 原型: 集合类<任意>;
}

//@@{ 集合类:Set }
声明 值量 集合类: 集合构造函数类;
//@@{ 只读集合类:ReadonlySet }
//@@{ 循环执行:forEach, 回调函数:callbackfn, 值:value, 值2:value2, 集合:set, 本体参数:thisArg, 存在:has, 值:value, 大小:size }
接口 只读集合类<T> {
    //@@{ 只读集合类:ReadonlySet }
    循环执行(回调函数: (值: T, 值2: T, 集合: 只读集合类<T>) => 无值, 本体参数?: 任意): 无值;
    存在(值: T): 真假;
    只读 大小: 数字;
}
//@@{ 弱集合类:WeakSet }
//@@{ 添加:add, 值:value, 删除:delete, 值:value, 存在:has, 值:value }
接口 弱集合类<T> {
    添加(值: T): 本体;
    删除(值: T): 真假;
    存在(值: T): 真假;
} 
//@@{ 弱集合类:WeakSet }
//@@{ 弱集合构造函数类:WeakSetConstructor }
//@@{ 值集:values, 原型:prototype }
接口 弱集合构造函数类 {
    新建 (): 弱集合类<实例>;
    新建 <T 扩展 实例>(值集?: T[]): 弱集合类<T>;
    只读 原型: 弱集合类<实例>;
}
//@@{ 弱集合类:WeakSet }
声明 值量 弱集合类: 弱集合构造函数类;
