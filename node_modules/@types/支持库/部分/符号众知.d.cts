/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/// <引用 不使用默认支持库= "真"/>
/// <引用 路径= "符号.d.cts" />
//@@{ 符号构造函数类:SymbolConstructor }
//@@{ 有实例:hasInstance, 是容易分开的联系:isConcatSpreadable, 匹配:match, 替换:replace, 搜索:search, 物种:species }
接口 符号构造函数类 {
    /**
     * A method that determines if a constructor object recognizes an object as one of the
     * constructor’s instances. Called by the semantics of the instanceof operator.
     */
    只读 有实例: 符号;
    /**
     * A Boolean value that if true indicates that an object should flatten to its array elements
     * by Array.prototype.concat.
     */
    只读 是容易分开的联系: 符号;
    /**
     * A regular expression method that matches the regular expression against a string. Called
     * by the String.prototype.match method.
     */
    只读 匹配: 符号;
    /**
     * A regular expression method that replaces matched substrings of a string. Called by the
     * String.prototype.replace method.
     */
    只读 替换: 符号;
    /**
     * A regular expression method that returns the index within a string that matches the
     * regular expression. Called by the String.prototype.search method.
     */
    只读 搜索: 符号;
    /**
     * A function valued property that is the constructor function that is used to create
     * derived objects.
     */
    只读 物种: 符号;
    /**
     * A regular expression method that splits a string at the indices that match the regular
     * expression. Called by the String.prototype.split method.
     */
    //@@{ 分割:split }
    只读 分割: 符号;
    /**
     * A method that converts an object to a corresponding primitive value.
     * Called by the ToPrimitive abstract operation.
     */
    //@@{ 转为原始:toPrimitive }
    只读 转为原始: 符号;
    /**
     * A String value that is used in the creation of the default string description of an object.
     * Called by the built-in method Object.prototype.toString.
     */
    //@@{ 转为文字标签:toStringTag }
    只读 转为文字标签: 符号;
    /**
     * An Object whose own property names are property names that are excluded from the 'with'
     * environment bindings of the associated objects.
     */
    //@@{ 范围之外:unscopables }
    只读 范围之外: 符号;
}
//@@{ 符号类:Symbol }
接口 符号类 {
    //@@{ "符号类":"Symbol" }
    只读 [符号类.转为文字标签]: "符号类";
}
//@@{ 数组类:Array }
接口 数组类<T> {
    /**
     * Returns an object whose properties have the value 'true'
     * when they will be absent when used in a 'with' statement.
     */
    [符号类.范围之外](): {
        //@@{ 复制宽度:copyWithin }
        复制宽度: 真假;
        //@@{ 条目集:entries }
        条目集: 真假;
        //@@{ 填充:fill }
        填充: 真假;
        //@@{ 查找:find }
        查找: 真假;
        //@@{ 查找索引:findIndex }
        查找索引: 真假;
        //@@{ 键集:keys }
        键集: 真假;
        //@@{ 值集:values }
        值集: 真假;
    };
}
//@@{ 时间日期类:Date }
//@@{ 提示:hint }
接口 时间日期类 {
    /**
     * Converts a Date object to a string.
     */
    //@@{ "默认":"default" }
    [符号类.转为原始](提示: "默认"): 文字;
    /**
     * Converts a Date object to a string.
     */
    //@@{ "文字":"string" }
    [符号类.转为原始](提示: "文字"): 文字;
    /**
     * Converts a Date object to a number.
     */
    //@@{ "数字":"number" }
    [符号类.转为原始](提示: "数字"): 数字;
    /**
     * Converts a Date object to a string or number.
     *
     * @param 提示 The strings "number", "string", or "default" to specify what primitive to return.
     *
     * @throws {类型错误类} If 'hint' was given something other than "number", "string", or "default".
     * @returns A number if 'hint' was "number", a string if 'hint' was "string" or "default".
     */
    [符号类.转为原始](提示: 文字): 文字 | 数字;
}
//@@{ 映射类:Map, "映射类":"Map" }
接口 映射类<K, V> {
    只读 [符号类.转为文字标签]: "映射类";
}
//@@{ 弱映射类:WeakMap, "弱映射类":"WeakMap" }
接口 弱映射类<K 扩展 实例, V> {
    只读 [符号类.转为文字标签]: "弱映射类";
}
//@@{ 集合类:Set, "集合类":"Set" }
接口 集合类<T> {
    只读 [符号类.转为文字标签]: "集合类";
}
//@@{ 弱集合类:WeakSet, "弱集合类":"WeakSet" }
//@@{ 弱集合类:WeakSet }
接口 弱集合类<T> {
    只读 [符号类.转为文字标签]: "弱集合类";
}
接口 JSON {
    只读 [符号类.转为文字标签]: "JSON";
}
//@@{ 函数类:Function } 
//@@{ 值:value }
接口 函数类 {
    /**
     * Determines whether the given value inherits from this function if this function was used
     * as a constructor function.
     *
     * A constructor function can control which objects are recognized as its instances by
     * 'instanceof' by overriding this method.
     */
    [符号类.有实例](值: 任意): 真假;
}
//@@{ 生成器函数类:GeneratorFunction, "生成器函数类":"GeneratorFunction" }
接口 生成器函数类 {
    只读 [符号类.转为文字标签]: "生成器函数类";
}
//@@{ 数学类:Math, "数学类":"Math"}
接口 数学类 {
    只读 [符号类.转为文字标签]: "数学类";
}
//@@{ 预设类:Promise, "预设类":"Promise" }
接口 预设类<T> {
    只读 [符号类.转为文字标签]: "预设类";
}
//@@{ 函数类:Function }
//@@{ 预设构造函数类:PromiseConstructor }
接口 预设构造函数类 {
    只读 [符号类.物种]: 函数类;
}
//@@{ 正则表达式类:RegExp }
接口 正则表达式类 {
    /**
     * Matches a string with this regular expression, and returns an array containing the results of
     * that search.
     * @param 文字 A string to search within.
     */
    //@@{ 正则匹配数组类:RegExpMatchArray }
    //@@{ 文字:string }
    [符号类.匹配](文字: 文字): 正则匹配数组类 | 空值;
    /**
     * Replaces text in a string, using this regular expression.
     * @param 文字 A String object or string literal whose contents matching against
     *               this regular expression will be replaced
     * @param 替换值 A String object or string literal containing the text to replace for every
     *                     successful match of this regular expression.
     */
    //@@{ 文字:string, 替换值:replaceValue }
    [符号类.替换](文字: 文字, 替换值: 文字): 文字;
    /**
     * Replaces text in a string, using this regular expression.
     * @param 文字 A String object or string literal whose contents matching against
     *               this regular expression will be replaced
     * @param 替代者 A function that returns the replacement text.
     */   
    //@@{ 文字:string, 替代者:replacer, 子文字:substring, 参数集:args }
    [符号类.替换](文字: 文字, 替代者: (子文字: 文字, ...参数集: 任意[]) => 文字): 文字;
    /**
     * Finds the position beginning first substring match in a regular expression search
     * using this regular expression.
     *
     * @param 文字 The string to search within.
     */
    //@@{ 文字:string }
    [符号类.搜索](文字: 文字): 数字;
    /**
     * Returns an array of substrings that were delimited by strings in the original input that
     * match against this regular expression.
     *
     * If the regular expression contains capturing parentheses, then each time this
     * regular expression matches, the results (including any undefined results) of the
     * capturing parentheses are spliced.
     *
     * @param 文字 string value to split
     * @param 限制 if not undefined, the output array is truncated so that it contains no more
     * than 'limit' elements.
     */
    //@@{ 文字:string }
    //@@{ 限制:limit }
    [符号类.分割](文字: 文字, 限制?: 数字): 文字[];
}
//@@{ 正则表达式构造函数类:RegExpConstructor }
接口 正则表达式构造函数类 {
    //@@{ 正则表达式构造函数类:RegExpConstructor }
    [符号类.物种](): 正则表达式构造函数类;
}
//@@{ 文字类:String }
接口 文字类 {
    /**
     * Matches a string an object that supports being matched against, and returns an array containing the results of that search.
     * @param 匹配器 An object that supports being matched against.
     */
    //@@{ 匹配:match }
    //@@{ 正则匹配数组类:RegExpMatchArray }
    //@@{ 匹配器:matcher, 文字:string }
    匹配(匹配器: {[符号类.匹配](文字: 文字): 正则匹配数组类 | 空值;}): 正则匹配数组类 | 空值;
    /**
     * Replaces text in a string, using an object that supports replacement within a string.
     * @param 文字 A object can search for and replace matches within a string.
     * @param 替换值 A string containing the text to replace for every successful match of searchValue in this string.
     */
    //@@{ 替换:replace }
    //@@{ 搜索值:searchValue, 文字:string, 替换值:replaceValue }
    替换(搜索值: { [符号类.替换](文字: 文字, 替换值: 文字): 文字;}, 替换值: 文字): 文字;
    /**
     * Replaces text in a string, using an object that supports replacement within a string.
     * @param 搜索值 A object can search for and replace matches within a string.
     * @param 替代者 A function that returns the replacement text.
     */
    //@@{ 替换:replace } 
    //@@{ 搜索值:searchValue, 文字:string, 子文字:substring, 参数集:args, 替代者:replacer }
    替换(搜索值: {[符号类.替换](文字: 文字, 替代者: (子文字: 文字, ...参数集: 任意[]) => 文字): 文字;}, 替代者: (子文字: 文字, ...参数集: 任意[]) => 文字): 文字;
    /**
     * Finds the first substring match in a regular expression search.
     * @param 搜索者 An object which supports searching within a string.
     */
    //@@{ 搜索:search }
    //@@{ 搜索者:searcher, 文字:string }
    搜索(搜索者: {[符号类.搜索](文字: 文字): 数字;}): 数字;
    /**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param 分束器 An object that can split a string.
     * @param 限制 A value used to limit the number of elements returned in the array.
     */
    //@@{ 分割:split }
    //@@{ 分束器:splitter, 文字:string, 限制:limit }
    分割(分束器: {[符号类.分割](文字: 文字, 限制?: 数字): 文字[];}, 限制?: 数字): 文字[];
}
//@@{ 数组缓冲区类:ArrayBuffer }
接口 数组缓冲区类 {
    //@@{ "数组缓冲区类":"ArrayBuffer" }
    只读 [符号类.转为文字标签]: "数组缓冲区类";
}
//@@{ 数据视图类:DataView }
接口 数据视图类 {
    //@@{ "数据视图类":"DataView" }
    只读 [符号类.转为文字标签]: "数据视图类";
}
//@@{ 整数8数组类:Int8Array }
接口 整数8数组类 {
    //@@{ "整数8数组类":"Int8Array" }
    只读 [符号类.转为文字标签]: "整数8数组类";
}
//@@{ 正整数8数组类:Uint8Array }
接口 正整数8数组类 {
    //@@{ "正整数8数组类":"UInt8Array" }
    只读 [符号类.转为文字标签]: "正整数8数组类";
}
//@@{ 正整数8钳位数组类:Uint8ClampedArray }
接口 正整数8钳位数组类 {
    //@@{ "正整数8钳位数组类":"Uint8ClampedArray" }
    只读 [符号类.转为文字标签]: "正整数8钳位数组类";
}
//@@{ 整数16数组类:Int16Array }
接口 整数16数组类 {
    //@@{ "整数16数组类":"Int16Array" }
    只读 [符号类.转为文字标签]: "整数16数组类";
}
//@@{ 正整数16数组类:Uint16Array }
接口 正整数16数组类 {
    //@@{ "正整数16数组类":"Uint16Array" }
    只读 [符号类.转为文字标签]: "正整数16数组类";
}
//@@{ 整数32数组类:Int32Array }
接口 整数32数组类 {
    //@@{ "整数32数组类":"Int32Array" }
    只读 [符号类.转为文字标签]: "整数32数组类";
}
//@@{ 正整数32数组:Uint32Array }
接口 正整数32数组 {
    //@@{ "正整数32数组":"Uint32Array" }
    只读 [符号类.转为文字标签]: "正整数32数组";
}
//@@{ 浮点32数组类:Float32Array }
接口 浮点32数组类 {
    //@@{ "浮点32数组类":"Float32Array" }
    只读 [符号类.转为文字标签]: "浮点32数组类";
}
//@@{ 浮点64数组类:Float64Array }
接口 浮点64数组类 {
    //@@{ "浮点64数组类":"Float64Array" }
    只读 [符号类.转为文字标签]: "浮点64数组类";
}
