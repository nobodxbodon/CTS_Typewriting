/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/// <引用 不使用默认支持库= "真"/>
//@@{ 预设连接类:PromiseLike }
//@@{ 预设类:Promise }
//@@{ 预设构造函数类:PromiseConstructor, 原型:prototype, 执行者:executor, 成功:resolve, 值:value, 失败:reject, 原因:reason, 所有:all }
接口 预设构造函数类 {
    /**
     * A reference to the prototype.
     */
    只读 原型: 预设类<任意>;
    /**
     * Creates a new Promise.
     * @param 执行者 A callback used to initialize the promise. This callback is passed two arguments:
     * a resolve callback used resolve the promise with a value or the result of another promise,
     * and a reject callback used to reject the promise with a provided reason or error.
     */
    新建 <T>(执行者: (成功: (值?: T | 预设连接类<T>) => 无值, 失败: (原因?: 任意) => 无值) => 无值): 预设类<T>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise } 
    //@@{ 值:values }
    所有<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>, T8 | 预设连接类<T8>, T9 | 预设连接类<T9>, T10 | 预设连接类<T10>]): 预设类<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param values An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }  
    所有<T1, T2, T3, T4, T5, T6, T7, T8, T9>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>, T8 | 预设连接类<T8>, T9 | 预设连接类<T9>]): 预设类<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2, T3, T4, T5, T6, T7, T8>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>, T8 | 预设连接类<T8>]): 预设类<[T1, T2, T3, T4, T5, T6, T7, T8]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2, T3, T4, T5, T6, T7>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>]): 预设类<[T1, T2, T3, T4, T5, T6, T7]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2, T3, T4, T5, T6>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>]): 预设类<[T1, T2, T3, T4, T5, T6]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2, T3, T4, T5>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>]): 预设类<[T1, T2, T3, T4, T5]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2, T3, T4>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>]): 预设类<[T1, T2, T3, T4]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2, T3>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>]): 预设类<[T1, T2, T3]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T1, T2>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>]): 预设类<[T1, T2]>;
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    所有<T>(值: (T | 预设连接类<T>)[]): 预设类<T[]>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    //@@{ 竞速:race }
    竞速<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>, T8 | 预设连接类<T8>, T9 | 预设连接类<T9>, T10 | 预设连接类<T10>]): 预设类<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3, T4, T5, T6, T7, T8, T9>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>, T8 | 预设连接类<T8>, T9 | 预设连接类<T9>]): 预设类<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3, T4, T5, T6, T7, T8>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>, T8 | 预设连接类<T8>]): 预设类<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3, T4, T5, T6, T7>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>, T7 | 预设连接类<T7>]): 预设类<T1 | T2 | T3 | T4 | T5 | T6 | T7>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3, T4, T5, T6>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>, T6 | 预设连接类<T6>]): 预设类<T1 | T2 | T3 | T4 | T5 | T6>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3, T4, T5>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>, T5 | 预设连接类<T5>]): 预设类<T1 | T2 | T3 | T4 | T5>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3, T4>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>, T4 | 预设连接类<T4>]): 预设类<T1 | T2 | T3 | T4>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2, T3>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>, T3 | 预设连接类<T3>]): 预设类<T1 | T2 | T3>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    竞速<T1, T2>(值: [T1 | 预设连接类<T1>, T2 | 预设连接类<T2>]): 预设类<T1 | T2>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise } 
    竞速<T>(值: (T | 预设连接类<T>)[]): 预设类<T>;
    /**
     * Creates a new rejected promise for the provided reason.
     * @param 原因 The reason the promise was rejected.
     * @returns A new rejected Promise.
     */
    //@@{ 预设类:Promise }
    //@@{ 失败:reject, 原因:reason }
    失败(原因: 任意): 预设类<不及>;
    /**
     * Creates a new rejected promise for the provided reason.
     * @param 原因 The reason the promise was rejected.
     * @returns A new rejected Promise.
     */
    //@@{ 预设类:Promise }
    失败<T>(原因: 任意): 预设类<T>;
    /**
     * Creates a new resolved promise for the provided value.
     * @param 值 A promise.
     * @returns A promise whose internal state matches the provided promise.
     */
    //@@{ 预设连接类:PromiseLike }
    //@@{ 预设类:Promise }
    //@@{ 成功:resolve }
    //@@{ 值:value }
    成功<T>(值: T | 预设连接类<T>): 预设类<T>;
    /**
     * Creates a new resolved promise .
     * @returns A resolved promise.
     */
    //@@{ 预设类:Promise }
    成功(): 预设类<无值>;
}

//@@{ 预设类:Promise }
声明 值量 预设类: 预设构造函数类;
