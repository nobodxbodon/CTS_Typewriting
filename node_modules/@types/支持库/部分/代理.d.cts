/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/// <引用 不使用默认支持库= "真"/>
//@@{ 代理处理程序类:ProxyHandler }
接口 代理处理程序类<T 扩展 实例> {
    //@@{ 取原型在:getPrototypeOf, 目标:target }
    取原型在?(目标: T): 实例 | 空值;
    //@@{ 置原型在:setPrototypeOf, 目标:target }
    置原型在?(目标: T, v: 任意): 真假;
    //@@{ 是可扩展的:isExtensible, 目标:target }
    是可扩展的?(目标: T): 真假;
    //@@{ 防止扩展:preventExtensions, 目标:target }
    防止扩展?(目标: T): 真假;
    //@@{ 取自身属性描述符:getOwnPropertyDescriptor, 目标:target, 属性键类:PropertyKey, 属性描述符类:PropertyDescriptor }
    取自身属性描述符?(目标: T, p: 属性键类): 属性描述符类 | 未定;
    //@@{ 存在:has, 目标:target, 属性键类:PropertyKey }
    存在?(目标: T, p: 属性键类): 真假;
    //@@{ 获取:get, 目标:target, 属性键类:PropertyKey, 接收器:receiver }
    获取?(目标: T, p: 属性键类, 接收器: 任意): 任意;
    //@@{ 设置:set, 目标:target, 属性键类:PropertyKey, 值:value, 接收器:receiver }
    设置?(目标: T, p: 属性键类, 值: 任意, 接收器: 任意): 真假;
    //@@{ 删除属性:deleteProperty, 目标:target, 属性键类:PropertyKey }
    删除属性?(目标: T, p: 属性键类): 真假;
    //@@{ 定义属性:defineProperty, 目标:target, 属性键类:PropertyKey, 特性集:attributes, 属性描述符类:PropertyDescriptor }
    定义属性?(目标: T, p: 属性键类, 特性集: 属性描述符类): 真假;
    //@@{ 属性键类:PropertyKey }
    enumerate?(target: T): 属性键类[];
    //@@{ 自身键集:ownKeys, 目标:target, 属性键类:PropertyKey }
    自身键集?(目标: T): 属性键类[];
    //@@{ 应用:apply, 目标:target, 本体参数:thisArg, 参数数组:argArray }
    应用?(目标: T, 本体参数: 任意, 参数数组?: 任意): 任意;
    //@@{ 构造器:construct, 目标:target, 参数数组:argArray, 新目标:newTarget }
    构造器?(目标: T, 参数数组: 任意, 新目标?: 任意): 实例;
}
//@@{ 代理构造函数类:ProxyConstructor }
接口 代理构造函数类 {
    //@@{ 可撤销的:revocable, 目标:target, 处理程序:handler, 代理处理程序类:ProxyHandler }
    可撤销的<T 扩展 实例>(目标: T, 处理程序: 代理处理程序类<T>): {
        //@@{ 代理:proxy }
        代理: T;
        //@@{ 撤销:revoke }
        撤销: () => 无值;
    };
    //@@{ 目标:target, 处理程序:handler, 代理处理程序类:ProxyHandler }
    新建 <T 扩展 实例>(目标: T, 处理程序: 代理处理程序类<T>): T;
}
//@@{ 代理类:Proxy, 代理构造函数类:ProxyConstructor }
声明 值量 代理类: 代理构造函数类;
