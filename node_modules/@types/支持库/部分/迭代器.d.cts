/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/// <引用 不使用默认支持库= "真"/>
/// <引用 路径= "符号.d.cts" />
//@@{ 符号构造函数类:SymbolConstructor }
接口 符号构造函数类 {
    /**
     * A method that returns the default iterator for an object. Called by the semantics of the
     * for-of statement.
     */
    //@@{ 迭代器:iterator }
    只读 迭代器: 符号;
}
//@@{ 迭代器结果类:IteratorResult }
接口 迭代器结果类<T> {
    //@@{ 完成:done }
    完成: 真假;
    //@@{ 值:value }
    值: T;
}
//@@{ 迭代器类:Iterator }
接口 迭代器类<T> {
    //@@{ 下个:next, 值:value, 迭代器结果类:IteratorResult }
    下个(值?: 任意): 迭代器结果类<T>;
    //@@{ 返回:return, 值:value, 迭代器结果类:IteratorResult }
    返回?(值?: 任意): 迭代器结果类<T>;
    //@@{ 抛出:throw, _错误:e, 迭代器结果类:IteratorResult }
    抛出?(_错误?: 任意): 迭代器结果类<T>;
}
//@@{ 可迭代类:Iterable }
接口 可迭代类<T> {
    //@@{ 符号类:Symbol, 迭代器:iterator, 迭代器类:Iterator }
    [符号类.迭代器](): 迭代器类<T>;
}
//@@{ 可迭代迭代器类:IterableIterator, 迭代器类:Iterator }
接口 可迭代迭代器类<T> 扩展 迭代器类<T> {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<T>;
}
//@@{ 数组类:Array }
接口 数组类<T> {
    /** Iterator */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<T>;
    /**
     * Returns an iterable of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, T]>;
    /**
     * Returns an iterable of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an iterable of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<T>;
}
//@@{ 数组构造函数类:ArrayConstructor }
接口 数组构造函数类 {
    /**
     * Creates an array from an iterable object.
     * @param 可迭代 An iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 可迭代:iterable, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg }
    从连接<T, U = T>(可迭代: 可迭代类<T>, 映射函数?: (值: T, 键: 数字) => U, 本体参数?: 任意): U[];
}
//@@{ 只读数组类:ReadonlyArray }
接口 只读数组类<T> {
    /** Iterator of values in the array. */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<T>;
    /**
     * Returns an iterable of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, T]>;
    /**
     * Returns an iterable of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an iterable of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<T>;
}
//@@{ 增强参数组接口:IArguments }
接口 增强参数组接口 {
    /** Iterator */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<任意>;
}
//@@{ 映射类:Map }
接口 映射类<K, V> {
    /** Returns an iterable of entries in the map. */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<[K, V]>;
    /**
     * Returns an iterable of key, value pairs for every entry in the map.
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[K, V]>;
    /**
     * Returns an iterable of keys in the map
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<K>;
    /**
     * Returns an iterable of values in the map
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<V>;
}
//@@{ 只读映射类:ReadonlyMap }
接口 只读映射类<K, V> {
    /** Returns an iterable of entries in the map. */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<[K, V]>;
    /**
     * Returns an iterable of key, value pairs for every entry in the map.
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[K, V]>;
    /**
     * Returns an iterable of keys in the map
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<K>;
    /**
     * Returns an iterable of values in the map
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<V>;
}
//@@{ 映射构造函数类:MapConstructor }
接口 映射构造函数类 {
    //@@{ 可迭代:iterable, 可迭代类:Iterable, 映射类:Map }
    新建 <K, V>(可迭代: 可迭代类<[K, V]>): 映射类<K, V>;
}
//@@{ 弱映射类:WeakMap }
接口 弱映射类<K 扩展 实例, V> {
}
//@@{ 弱映射构造函数类:WeakMapConstructor }
接口 弱映射构造函数类 {
    //@@{ 可迭代:iterable, 可迭代类:Iterable, 弱映射类:WeakMap }
    新建 <K 扩展 实例, V>(可迭代: 可迭代类<[K, V]>): 弱映射类<K, V>;
}
//@@{ 集合类:Set }
接口 集合类<T> {
    /** Iterates over values in the set. */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<T>;
    /**
     * Returns an iterable of [v,v] pairs for every value `v` in the set.
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[T, T]>;
    /**
     * Despite its name, returns an iterable of the values in the set,
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<T>;
    /**
     * Returns an iterable of values in the set.
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<T>;
}
//@@{ 只读集合类:ReadonlySet }
接口 只读集合类<T> {
    /** Iterates over values in the set. */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<T>;
    /**
     * Returns an iterable of [v,v] pairs for every value `v` in the set.
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[T, T]>;
    /**
     * Despite its name, returns an iterable of the values in the set,
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<T>;
    /**
     * Returns an iterable of values in the set.
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<T>;
}
//@@{ 集合构造函数类:SetConstructor }
接口 集合构造函数类 {
    //@@{ 可迭代:iterable, 可迭代类:Iterable, 集合类:Set }
    新建 <T>(可迭代: 可迭代类<T>): 集合类<T>;
}
//@@{ 弱集合类:WeakSet }
接口 弱集合类<T> {
}
//@@{ 弱集合构造函数类:WeakSetConstructor }
接口 弱集合构造函数类 {
    //@@{ 可迭代:iterable, 可迭代类:Iterable, 弱集合类:WeakSet }
    新建 <T 扩展 实例>(可迭代: 可迭代类<T>): 弱集合类<T>;
}
//@@{ 预设类:Promise }
接口 预设类<T> {
}
//@@{ 预设构造函数类:PromiseConstructor }
接口 预设构造函数类 {
    /**
     * Creates a Promise that is resolved with an array of results when all of the provided Promises
     * resolve, or rejected when any Promise is rejected.
     * @param 值集 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 所有:all, T所有:TAll, 值集:values, 可迭代类:Iterable, 预设连接类:PromiseLike, 预设类:Promise }
    所有<T所有>(值集: 可迭代类<T所有 | 预设连接类<T所有>>): 预设类<T所有[]>;
    /**
     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
     * or rejected.
     * @param 值集 An array of Promises.
     * @returns A new Promise.
     */
    //@@{ 竞速:race, 值集:values, 可迭代类:Iterable, 预设连接类:PromiseLike, 预设类:Promise }
    竞速<T>(值集: 可迭代类<T | 预设连接类<T>>): 预设类<T>;
}
//@@{ 反射类:Reflect }
声明 名域 反射类 {
    //@@{ 可枚举:enumerate, 目标:target, 可迭代迭代器类:IterableIterator }
    函数 可枚举(目标: 实例): 可迭代迭代器类<任意>;
}
//@@{ 文字类:String }
接口 文字类 {
    /** Iterator */
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<文字>;
}
//@@{ 整数8数组类:Int8Array }
接口 整数8数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 整数8数组构造函数类:Int8ArrayConstructor }
接口 整数8数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 整数8数组类:Int8Array }
    新建 (元素集: 可迭代类<数字>): 整数8数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 整数8数组类:Int8Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 整数8数组类;
}
//@@{ 正整数8数组类:Uint8Array }
接口 正整数8数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 正整数8数组构造函数类:Uint8ArrayConstructor }
接口 正整数8数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 正整数8数组类:Uint8Array }
    新建 (元素集: 可迭代类<数字>): 正整数8数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 正整数8数组类:Uint8Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 正整数8数组类;
}
//@@{ 正整数8钳位数组类:Uint8ClampedArray }
接口 正整数8钳位数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 正整数8钳位数组构造函数类:Uint8ClampedArrayConstructor }
接口 正整数8钳位数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 正整数8钳位数组类:Uint8ClampedArray }
    新建 (元素集: 可迭代类<数字>): 正整数8钳位数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 正整数8钳位数组类:Uint8ClampedArray }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 正整数8钳位数组类;
}
//@@{ 整数16数组类:Int16Array }
接口 整数16数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 整数16数组构造函数类:Int16ArrayConstructor }
接口 整数16数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 整数16数组类:Int16Array }
    新建 (元素集: 可迭代类<数字>): 整数16数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 整数16数组类:Int16Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 整数16数组类;
}
//@@{ 正整数16数组类:Uint16Array }
接口 正整数16数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 正整数16数组构造函数类:Uint16ArrayConstructor }
接口 正整数16数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 正整数16数组类:Uint16Array }
    新建 (元素集: 可迭代类<数字>): 正整数16数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 正整数16数组类:Uint16Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 正整数16数组类;
}
//@@{ 整数32数组类:Int32Array }
接口 整数32数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 整数32数组构造函数类:Int32ArrayConstructor }
接口 整数32数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 整数32数组类:Int32Array }
    新建 (元素集: 可迭代类<数字>): 整数32数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 整数32数组类:Int32Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 整数32数组类;
}
//@@{ 正整数32数组:Uint32Array }
接口 正整数32数组 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 正整数32数组构造函数类:Uint32ArrayConstructor }
接口 正整数32数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 正整数32数组:Uint32Array }
    新建 (元素集: 可迭代类<数字>): 正整数32数组;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 正整数32数组:Uint32Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 正整数32数组;
}
//@@{ 浮点32数组类:Float32Array }
接口 浮点32数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 浮点32数组构造函数类:Float32ArrayConstructor }
接口 浮点32数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 浮点32数组类:Float32Array }
    新建 (元素集: 可迭代类<数字>): 浮点32数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 浮点32数组类:Float32Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 浮点32数组类;
}
//@@{ 浮点64数组类:Float64Array }
接口 浮点64数组类 {
    //@@{ 符号类:Symbol, 迭代器:iterator, 可迭代迭代器类:IterableIterator }
    [符号类.迭代器](): 可迭代迭代器类<数字>;
    /**
     * Returns an array of key, value pairs for every entry in the array
     */
    //@@{ 条目集:entries, 可迭代迭代器类:IterableIterator }
    条目集(): 可迭代迭代器类<[数字, 数字]>;
    /**
     * Returns an list of keys in the array
     */
    //@@{ 键集:keys, 可迭代迭代器类:IterableIterator }
    键集(): 可迭代迭代器类<数字>;
    /**
     * Returns an list of values in the array
     */
    //@@{ 值集:values, 可迭代迭代器类:IterableIterator }
    值集(): 可迭代迭代器类<数字>;
}
//@@{ 浮点64数组构造函数类:Float64ArrayConstructor }
接口 浮点64数组构造函数类 {
    //@@{ 元素集:elements, 可迭代类:Iterable, 浮点64数组类:Float64Array }
    新建 (元素集: 可迭代类<数字>): 浮点64数组类;
    /**
     * Creates an array from an array-like or iterable object.
     * @param 数组连接 An array-like or iterable object to convert to an array.
     * @param 映射函数 A mapping function to call on every element of the array.
     * @param 本体参数 Value of 'this' used to invoke the mapfn.
     */
    //@@{ 从连接:from, 数组连接:arrayLike, 可迭代类:Iterable, 映射函数:mapfn, 值:v, 键:k, 本体参数:thisArg, 浮点64数组类:Float64Array }
    从连接(数组连接: 可迭代类<数字>, 映射函数?: (值: 数字, 键: 数字) => 数字, 本体参数?: 任意): 浮点64数组类;
}
